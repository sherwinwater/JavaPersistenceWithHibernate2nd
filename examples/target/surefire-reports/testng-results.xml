<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="216" passed="140" failed="5" skipped="71">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-08-31T01:03:13Z" name="AllTests - examples" finished-at="2020-08-31T01:03:56Z" duration-ms="43594">
    <groups>
      <group name="MYSQL">
        <method signature="Locking.extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" name="extendedLock" class="org.jpwh.test.concurrency.Locking"/>
        <method signature="CreateExecuteQueries.createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="createNamedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="namedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="queryHints" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="BulkStatementsSQL.bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" name="bulkUpdate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" name="bulkUpdateHibernate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
      </group> <!-- MYSQL -->
      <group name="H2">
        <method signature="SimpleTransitions.replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" name="replicate" class="org.jpwh.test.simple.SimpleTransitions"/>
        <method signature="TablePerClass.jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" name="jdbcBillingDetailsSqlQuery" class="org.jpwh.test.inheritance.TablePerClass"/>
        <method signature="GeneratedProperties.storeLoadLastModified()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" name="storeLoadLastModified" class="org.jpwh.test.advanced.GeneratedProperties"/>
        <method signature="CustomSchema.configurePersistenceUnit()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" name="configurePersistenceUnit" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadCheckColumnInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" name="storeLoadCheckColumnInvalid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadCheckSingleRowInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" name="storeLoadCheckSingleRowInvalid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadCheckSubselectValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" name="storeLoadCheckSubselectValid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadDomainInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" name="storeLoadDomainInvalid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadUniqueMultiColumnValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" name="storeLoadUniqueMultiColumnValid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="CustomSchema.storeLoadValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" name="storeLoadValid" class="org.jpwh.test.complexschemas.CustomSchema"/>
        <method signature="Locking.extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" name="extendedLock" class="org.jpwh.test.concurrency.Locking"/>
        <method signature="NonTransactional.autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f56875e]" name="autoCommit" class="org.jpwh.test.concurrency.NonTransactional"/>
        <method signature="ExtendedPC.conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" name="conversationCreateItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="ExtendedPC.conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" name="conversationEditItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="CreateExecuteQueries.createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="createNamedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="namedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="queryHints" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="HibernateSQLQueries.executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" name="executeRecursiveQueries" class="org.jpwh.test.querying.sql.HibernateSQLQueries"/>
        <method signature="NativeQueries.executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" name="executeRecursiveQueries" class="org.jpwh.test.querying.sql.NativeQueries"/>
        <method signature="Projection.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.criteria.Projection"/>
        <method signature="Projection.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.jpql.Projection"/>
        <method signature="Restriction.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.criteria.Restriction"/>
        <method signature="Restriction.executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" name="executeQueriesWithFunctions" class="org.jpwh.test.querying.jpql.Restriction"/>
        <method signature="CustomSQL.readRestrictedCollection()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" name="readRestrictedCollection" class="org.jpwh.test.customsql.CustomSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" name="bulkUpdate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" name="bulkUpdateHibernate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
      </group> <!-- H2 -->
      <group name="POSTGRESQL">
        <method signature="SimpleTransitions.replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" name="replicate" class="org.jpwh.test.simple.SimpleTransitions"/>
        <method signature="TablePerClass.jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" name="jdbcBillingDetailsSqlQuery" class="org.jpwh.test.inheritance.TablePerClass"/>
        <method signature="NonTransactional.autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f56875e]" name="autoCommit" class="org.jpwh.test.concurrency.NonTransactional"/>
        <method signature="ExtendedPC.conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" name="conversationCreateItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="ExtendedPC.conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" name="conversationEditItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="CustomSQL.readRestrictedCollection()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" name="readRestrictedCollection" class="org.jpwh.test.customsql.CustomSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" name="bulkUpdate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
        <method signature="BulkStatementsSQL.bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" name="bulkUpdateHibernate" class="org.jpwh.test.bulkbatch.BulkStatementsSQL"/>
      </group> <!-- POSTGRESQL -->
      <group name="ORACLE">
        <method signature="SimpleTransitions.replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" name="replicate" class="org.jpwh.test.simple.SimpleTransitions"/>
        <method signature="Locking.extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" name="extendedLock" class="org.jpwh.test.concurrency.Locking"/>
        <method signature="NonTransactional.autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f56875e]" name="autoCommit" class="org.jpwh.test.concurrency.NonTransactional"/>
        <method signature="ExtendedPC.conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" name="conversationCreateItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="ExtendedPC.conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" name="conversationEditItem" class="org.jpwh.test.conversation.ExtendedPC"/>
        <method signature="CreateExecuteQueries.createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="createNamedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="namedQueries" class="org.jpwh.test.querying.CreateExecuteQueries"/>
        <method signature="CreateExecuteQueries.queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" name="queryHints" class="org.jpwh.test.querying.CreateExecuteQueries"/>
      </group> <!-- ORACLE -->
    </groups>
    <test started-at="2020-08-31T01:03:13Z" name="Hello World" finished-at="2020-08-31T01:03:14Z" duration-ms="1581">
      <class name="org.jpwh.helloworld.HelloWorldJPA">
        <test-method signature="storeLoadMessage()[pri:0, instance:org.jpwh.helloworld.HelloWorldJPA@5e0826e7]" started-at="2020-08-30T21:03:13Z" name="storeLoadMessage" finished-at="2020-08-30T21:03:14Z" duration-ms="1515" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMessage -->
      </class> <!-- org.jpwh.helloworld.HelloWorldJPA -->
      <class name="org.jpwh.helloworld.HelloWorldHibernate">
        <test-method signature="storeLoadMessage()[pri:0, instance:org.jpwh.helloworld.HelloWorldHibernate@498d318c]" started-at="2020-08-30T21:03:14Z" name="storeLoadMessage" finished-at="2020-08-30T21:03:14Z" duration-ms="59" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMessage -->
      </class> <!-- org.jpwh.helloworld.HelloWorldHibernate -->
    </test> <!-- Hello World -->
    <test started-at="2020-08-31T01:03:14Z" name="Simple Mappings" finished-at="2020-08-31T01:03:15Z" duration-ms="213">
      <class name="org.jpwh.test.simple.CRUD">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUD@36ebc363]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUD@36ebc363]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUD@36ebc363]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUD@36ebc363]" started-at="2020-08-30T21:03:15Z" name="storeAndQueryItems" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
      </class> <!-- org.jpwh.test.simple.CRUD -->
      <class name="org.jpwh.test.simple.CRUDMetadataXML">
        <test-method signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@43bc63a3]" started-at="2020-08-30T21:03:15Z" name="storeAndQueryItems" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@43bc63a3]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@43bc63a3]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataXML@43bc63a3]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.CRUDMetadataXML -->
      <class name="org.jpwh.test.simple.SimpleTransitions">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="basicUOW()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="basicUOW" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- basicUOW -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="detach()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="detach" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- detach -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="flushModeType()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="flushModeType" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushModeType -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="makePersistent()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="makePersistent" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- makePersistent -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="makeTransient()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="makeTransient" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- makeTransient -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="mergeDetached()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="mergeDetached" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mergeDetached -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="refresh()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="refresh" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refresh -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="replicate()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="replicate" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- replicate -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="retrievePersistent()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="retrievePersistent" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrievePersistent -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="retrievePersistentReference()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="retrievePersistentReference" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrievePersistentReference -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="scopeOfIdentity()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="scopeOfIdentity" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- scopeOfIdentity -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.SimpleTransitions@22ff4249]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.SimpleTransitions -->
      <class name="org.jpwh.test.simple.CRUDMetadataHBMXML">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@702657cc]" started-at="2020-08-30T21:03:14Z" name="beforeClass" finished-at="2020-08-30T21:03:14Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@702657cc]" started-at="2020-08-30T21:03:14Z" name="beforeMethod" finished-at="2020-08-30T21:03:14Z" duration-ms="0" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[Unable to build entity manager factory]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: Unable to build entity manager factory
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:66)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:55)
	at org.jpwh.env.JPASetup.<init>(JPASetup.java:62)
	at org.jpwh.env.JPATest.beforeMethod(JPATest.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:653)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.boot.InvalidMappingException: Could not parse mapping document: simple/Native.hbm.xml (RESOURCE)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:46)
	at org.hibernate.boot.jaxb.internal.UrlXmlSource.doBind(UrlXmlSource.java:36)
	at org.hibernate.boot.spi.XmlMappingBinderAccess.bind(XmlMappingBinderAccess.java:59)
	at org.hibernate.boot.MetadataSources.addResource(MetadataSources.java:274)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.populate(EntityManagerFactoryBuilderImpl.java:668)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.<init>(EntityManagerFactoryBuilderImpl.java:175)
	at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:34)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilder(HibernatePersistenceProvider.java:165)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:114)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:71)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:52)
	... 38 more
Caused by: org.hibernate.boot.MappingException: Unable to perform unmarshalling at line number 0 and column 0. Message: null : origin(simple/Native.hbm.xml)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:178)
	at org.hibernate.boot.jaxb.internal.MappingBinder.doBind(MappingBinder.java:57)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.doBind(AbstractBinder.java:102)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.bind(AbstractBinder.java:57)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:43)
	... 48 more
Caused by: javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:278)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:421)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:721)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:662)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:162)
	... 52 more
Caused by: java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
	at javax.xml.bind.ServiceLoaderUtil.nullSafeLoadClass(ServiceLoaderUtil.java:122)
	at javax.xml.bind.ServiceLoaderUtil.safeLoadClass(ServiceLoaderUtil.java:155)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:276)
	... 56 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@702657cc]" started-at="2020-08-30T21:03:15Z" name="storeAndQueryItems" finished-at="2020-08-30T21:03:15Z" duration-ms="2" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataHBMXML@702657cc]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.CRUDMetadataHBMXML -->
      <class name="org.jpwh.test.simple.AccessJPAMetamodel">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="accessDynamicMetamodel()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="accessDynamicMetamodel" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accessDynamicMetamodel -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="accessStaticMetamodel()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="accessStaticMetamodel" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accessStaticMetamodel -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="queryStaticMetamodel()[pri:0, instance:org.jpwh.test.simple.AccessJPAMetamodel@22555ebf]" started-at="2020-08-30T21:03:15Z" name="queryStaticMetamodel" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryStaticMetamodel -->
      </class> <!-- org.jpwh.test.simple.AccessJPAMetamodel -->
      <class name="org.jpwh.test.simple.MappingManyToOne">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@3c41ed1d]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@3c41ed1d]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@3c41ed1d]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="storeAndLoadBids()[pri:0, instance:org.jpwh.test.simple.MappingManyToOne@3c41ed1d]" started-at="2020-08-30T21:03:15Z" name="storeAndLoadBids" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadBids -->
      </class> <!-- org.jpwh.test.simple.MappingManyToOne -->
      <class name="org.jpwh.test.simple.ModelOperations">
        <test-method signature="linkBidAndItem()[pri:0, instance:org.jpwh.test.simple.ModelOperations@38425407]" started-at="2020-08-30T21:03:15Z" name="linkBidAndItem" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkBidAndItem -->
        <test-method signature="validateItem()[pri:0, instance:org.jpwh.test.simple.ModelOperations@38425407]" started-at="2020-08-30T21:03:15Z" name="validateItem" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="FAIL">
          <exception class="javax.validation.ValidationException">
            <message>
              <![CDATA[Unable to instantiate Configuration.]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.validation.ValidationException: Unable to instantiate Configuration.
	at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:279)
	at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:110)
	at org.jpwh.test.simple.ModelOperations.validateItem(ModelOperations.java:42)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 1
	at org.hibernate.validator.internal.util.Version.getJavaRelease(Version.java:36)
	at org.hibernate.validator.internal.engine.ConfigurationImpl.<init>(ConfigurationImpl.java:119)
	at org.hibernate.validator.internal.engine.ConfigurationImpl.<init>(ConfigurationImpl.java:95)
	at org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:31)
	at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)
	... 35 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.validation.ValidationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateItem -->
      </class> <!-- org.jpwh.test.simple.ModelOperations -->
      <class name="org.jpwh.test.simple.CRUDMetadataOverrideXML">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@54d9d12d]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@54d9d12d]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="checkMetadataOverride()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@54d9d12d]" started-at="2020-08-30T21:03:15Z" name="checkMetadataOverride" finished-at="2020-08-30T21:03:15Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkMetadataOverride -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@54d9d12d]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@54d9d12d]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@54d9d12d]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="storeAndQueryItems()[pri:0, instance:org.jpwh.test.simple.CRUDMetadataOverrideXML@54d9d12d]" started-at="2020-08-30T21:03:15Z" name="storeAndQueryItems" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndQueryItems -->
      </class> <!-- org.jpwh.test.simple.CRUDMetadataOverrideXML -->
      <class name="org.jpwh.test.simple.MappingEmbeddables">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@34e9fd99]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@34e9fd99]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@34e9fd99]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@34e9fd99]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="storeAndLoadInvalidUsers()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@34e9fd99]" started-at="2020-08-30T21:03:15Z" name="storeAndLoadInvalidUsers" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadInvalidUsers -->
        <test-method signature="storeAndLoadUsers()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@34e9fd99]" started-at="2020-08-30T21:03:15Z" name="storeAndLoadUsers" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsers -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.simple.MappingEmbeddables@34e9fd99]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.simple.MappingEmbeddables -->
    </test> <!-- Simple Mappings -->
    <test started-at="2020-08-31T01:03:15Z" name="Inheritance Mappings" finished-at="2020-08-31T01:03:19Z" duration-ms="4050">
      <class name="org.jpwh.test.inheritance.Joined">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="beforeClass" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="storeBillingDetailsLoadCreditCards" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="jdbcBillingDetailsSqlQuery" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="jdbcCreditCardSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="jdbcCreditCardSqlQuery" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcCreditCardSqlQuery -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.Joined@77c2494c]" started-at="2020-08-30T21:03:19Z" name="storeLoadBillingDetails" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
      </class> <!-- org.jpwh.test.inheritance.Joined -->
      <class name="org.jpwh.test.inheritance.TablePerClass">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="beforeClass" finished-at="2020-08-30T21:03:17Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="beforeMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="storeBillingDetailsLoadCreditCards" finished-at="2020-08-30T21:03:17Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="afterMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="58" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="beforeMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="jdbcBillingDetailsSqlQuery" finished-at="2020-08-30T21:03:17Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="afterMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="51" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:17Z" name="beforeMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:18Z" name="storeLoadBillingDetails" finished-at="2020-08-30T21:03:18Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.TablePerClass@233795b6]" started-at="2020-08-30T21:03:18Z" name="afterMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.TablePerClass -->
      <class name="org.jpwh.test.inheritance.PolymorphicOneToMany">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@229f66ed]" started-at="2020-08-30T21:03:18Z" name="beforeClass" finished-at="2020-08-30T21:03:18Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@229f66ed]" started-at="2020-08-30T21:03:18Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="237" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@229f66ed]" started-at="2020-08-30T21:03:19Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:19Z" duration-ms="53" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicOneToMany@229f66ed]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="57" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.PolymorphicOneToMany -->
      <class name="org.jpwh.test.inheritance.Embeddable">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@662ac478]" started-at="2020-08-30T21:03:19Z" name="beforeClass" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeAndLoad()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@662ac478]" started-at="2020-08-30T21:03:19Z" name="storeAndLoad" finished-at="2020-08-30T21:03:19Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoad -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@662ac478]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Embeddable@662ac478]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.Embeddable -->
      <class name="org.jpwh.test.inheritance.MixedFetchSelect">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="beforeClass" finished-at="2020-08-30T21:03:19Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[Unable to build entity manager factory]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: Unable to build entity manager factory
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:66)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:55)
	at org.jpwh.env.JPASetup.<init>(JPASetup.java:62)
	at org.jpwh.env.JPATest.beforeMethod(JPATest.java:54)
	at jdk.internal.reflect.GeneratedMethodAccessor32.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:653)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.boot.InvalidMappingException: Could not parse mapping document: inheritance/mixed/FetchSelect.hbm.xml (RESOURCE)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:46)
	at org.hibernate.boot.jaxb.internal.UrlXmlSource.doBind(UrlXmlSource.java:36)
	at org.hibernate.boot.spi.XmlMappingBinderAccess.bind(XmlMappingBinderAccess.java:59)
	at org.hibernate.boot.MetadataSources.addResource(MetadataSources.java:274)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.populate(EntityManagerFactoryBuilderImpl.java:668)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.<init>(EntityManagerFactoryBuilderImpl.java:175)
	at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:34)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilder(HibernatePersistenceProvider.java:165)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:114)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:71)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:52)
	... 37 more
Caused by: org.hibernate.boot.MappingException: Unable to perform unmarshalling at line number 0 and column 0. Message: null : origin(inheritance/mixed/FetchSelect.hbm.xml)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:178)
	at org.hibernate.boot.jaxb.internal.MappingBinder.doBind(MappingBinder.java:57)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.doBind(AbstractBinder.java:102)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.bind(AbstractBinder.java:57)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:43)
	... 47 more
Caused by: javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:278)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:421)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:721)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:662)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:162)
	... 51 more
Caused by: java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
	at javax.xml.bind.ServiceLoaderUtil.nullSafeLoadClass(ServiceLoaderUtil.java:122)
	at javax.xml.bind.ServiceLoaderUtil.safeLoadClass(ServiceLoaderUtil.java:155)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:276)
	... 55 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="storeBillingDetailsLoadCreditCards" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="jdbcBillingDetailsSqlQuery" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="storeLoadBillingDetails" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MixedFetchSelect@3eb25e1a]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.inheritance.MixedFetchSelect -->
      <class name="org.jpwh.test.inheritance.MappedSuperclass">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="beforeClass" finished-at="2020-08-30T21:03:16Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="beforeMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="storeBillingDetailsLoadCreditCards" finished-at="2020-08-30T21:03:16Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="afterMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="60" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="beforeMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="jdbcSqlQueryBankAccount()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="jdbcSqlQueryBankAccount" finished-at="2020-08-30T21:03:16Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcSqlQueryBankAccount -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="afterMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:16Z" name="beforeMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="205" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="jdbcSqlQueryCreditCard()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:17Z" name="jdbcSqlQueryCreditCard" finished-at="2020-08-30T21:03:17Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcSqlQueryCreditCard -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:17Z" name="afterMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:17Z" name="beforeMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:17Z" name="storeLoadBillingDetails" finished-at="2020-08-30T21:03:17Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.MappedSuperclass@f5958c9]" started-at="2020-08-30T21:03:17Z" name="afterMethod" finished-at="2020-08-30T21:03:17Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.MappedSuperclass -->
      <class name="org.jpwh.test.inheritance.Mixed">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="beforeMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="beforeClass" finished-at="2020-08-30T21:03:18Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="storeBillingDetailsLoadCreditCards" finished-at="2020-08-30T21:03:18Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="afterMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="56" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="beforeMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="jdbcBillingDetailsSqlQuery" finished-at="2020-08-30T21:03:18Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="afterMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="beforeMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="storeLoadBillingDetails" finished-at="2020-08-30T21:03:18Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.Mixed@477b4cdf]" started-at="2020-08-30T21:03:18Z" name="afterMethod" finished-at="2020-08-30T21:03:18Z" duration-ms="66" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.Mixed -->
      <class name="org.jpwh.test.inheritance.PolymorphicManyToOne">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@31190526]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@31190526]" started-at="2020-08-30T21:03:19Z" name="beforeClass" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@31190526]" started-at="2020-08-30T21:03:19Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.PolymorphicManyToOne@31190526]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.PolymorphicManyToOne -->
      <class name="org.jpwh.test.inheritance.SingleTable">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="beforeClass" finished-at="2020-08-30T21:03:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeBillingDetailsLoadCreditCards()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="storeBillingDetailsLoadCreditCards" finished-at="2020-08-30T21:03:15Z" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeBillingDetailsLoadCreditCards -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="73" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="213" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="jdbcBillingDetailsSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="jdbcBillingDetailsSqlQuery" finished-at="2020-08-30T21:03:15Z" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcBillingDetailsSqlQuery -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="afterMethod" finished-at="2020-08-30T21:03:15Z" duration-ms="65" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:15Z" name="beforeMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="jdbcCreditCardSqlQuery()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:16Z" name="jdbcCreditCardSqlQuery" finished-at="2020-08-30T21:03:16Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jdbcCreditCardSqlQuery -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:16Z" name="afterMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="78" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:16Z" name="beforeMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadBillingDetails()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:16Z" name="storeLoadBillingDetails" finished-at="2020-08-30T21:03:16Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadBillingDetails -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.inheritance.SingleTable@6743e411]" started-at="2020-08-30T21:03:16Z" name="afterMethod" finished-at="2020-08-30T21:03:16Z" duration-ms="77" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.inheritance.SingleTable -->
    </test> <!-- Inheritance Mappings -->
    <test started-at="2020-08-31T01:03:19Z" name="Advanced Mappings" finished-at="2020-08-31T01:03:23Z" duration-ms="3823">
      <class name="org.jpwh.test.advanced.GeneratedProperties">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" started-at="2020-08-30T21:03:20Z" name="beforeClass" finished-at="2020-08-30T21:03:20Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" started-at="2020-08-30T21:03:20Z" name="beforeMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="189" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadInitialPrice()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" started-at="2020-08-30T21:03:20Z" name="storeLoadInitialPrice" finished-at="2020-08-30T21:03:20Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadInitialPrice -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" started-at="2020-08-30T21:03:20Z" name="afterMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="53" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" started-at="2020-08-30T21:03:20Z" name="beforeMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadLastModified()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" started-at="2020-08-30T21:03:20Z" name="storeLoadLastModified" finished-at="2020-08-30T21:03:20Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadLastModified -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.GeneratedProperties@ba2f4ec]" started-at="2020-08-30T21:03:20Z" name="afterMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.GeneratedProperties -->
      <class name="org.jpwh.test.advanced.TransformingColumns">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@3a52dba3]" started-at="2020-08-30T21:03:22Z" name="beforeMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@3a52dba3]" started-at="2020-08-30T21:03:22Z" name="beforeClass" finished-at="2020-08-30T21:03:22Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadTransform()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@3a52dba3]" started-at="2020-08-30T21:03:22Z" name="storeLoadTransform" finished-at="2020-08-30T21:03:22Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadTransform -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.TransformingColumns@3a52dba3]" started-at="2020-08-30T21:03:22Z" name="afterMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.TransformingColumns -->
      <class name="org.jpwh.test.advanced.AccessType">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.AccessType@1c1bbc4e]" started-at="2020-08-30T21:03:21Z" name="beforeMethod" finished-at="2020-08-30T21:03:21Z" duration-ms="181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.AccessType@1c1bbc4e]" started-at="2020-08-30T21:03:21Z" name="beforeClass" finished-at="2020-08-30T21:03:21Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadAccessType()[pri:0, instance:org.jpwh.test.advanced.AccessType@1c1bbc4e]" started-at="2020-08-30T21:03:21Z" name="storeLoadAccessType" finished-at="2020-08-30T21:03:21Z" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadAccessType -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.AccessType@1c1bbc4e]" started-at="2020-08-30T21:03:21Z" name="afterMethod" finished-at="2020-08-30T21:03:21Z" duration-ms="75" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.AccessType -->
      <class name="org.jpwh.test.advanced.Temporal">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.Temporal@fbd1f6]" started-at="2020-08-30T21:03:22Z" name="beforeClass" finished-at="2020-08-30T21:03:22Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.Temporal@fbd1f6]" started-at="2020-08-30T21:03:22Z" name="beforeMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadTemporal()[pri:0, instance:org.jpwh.test.advanced.Temporal@fbd1f6]" started-at="2020-08-30T21:03:22Z" name="storeLoadTemporal" finished-at="2020-08-30T21:03:22Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadTemporal -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.Temporal@fbd1f6]" started-at="2020-08-30T21:03:22Z" name="afterMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="60" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.Temporal -->
      <class name="org.jpwh.test.advanced.Enum">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.Enum@b3ca52e]" started-at="2020-08-30T21:03:22Z" name="beforeClass" finished-at="2020-08-30T21:03:22Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.Enum@b3ca52e]" started-at="2020-08-30T21:03:22Z" name="beforeMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadEnum()[pri:0, instance:org.jpwh.test.advanced.Enum@b3ca52e]" started-at="2020-08-30T21:03:22Z" name="storeLoadEnum" finished-at="2020-08-30T21:03:22Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadEnum -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.Enum@b3ca52e]" started-at="2020-08-30T21:03:22Z" name="afterMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.Enum -->
      <class name="org.jpwh.test.converter.UserTypes">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.converter.UserTypes@752325ad]" started-at="2020-08-30T21:03:19Z" name="beforeClass" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.converter.UserTypes@752325ad]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadMonetaryAmount()[pri:0, instance:org.jpwh.test.converter.UserTypes@752325ad]" started-at="2020-08-30T21:03:19Z" name="storeLoadMonetaryAmount" finished-at="2020-08-30T21:03:19Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMonetaryAmount -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.converter.UserTypes@752325ad]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="65" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.converter.UserTypes -->
      <class name="org.jpwh.test.advanced.BooleanOverride">
        <test-method is-config="true" signature="configurePersistenceUnit()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@1ce24091]" started-at="2020-08-30T21:03:19Z" name="configurePersistenceUnit" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configurePersistenceUnit -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@1ce24091]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="247" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@1ce24091]" started-at="2020-08-30T21:03:19Z" name="beforeClass" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadOverride()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@1ce24091]" started-at="2020-08-30T21:03:19Z" name="storeLoadOverride" finished-at="2020-08-30T21:03:19Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadOverride -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.BooleanOverride@1ce24091]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="78" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.BooleanOverride -->
      <class name="org.jpwh.test.advanced.LazyProperties">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@55fe41ea]" started-at="2020-08-30T21:03:21Z" name="beforeMethod" finished-at="2020-08-30T21:03:21Z" duration-ms="211" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@55fe41ea]" started-at="2020-08-30T21:03:21Z" name="beforeClass" finished-at="2020-08-30T21:03:21Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadLocator()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@55fe41ea]" started-at="2020-08-30T21:03:21Z" name="storeLoadLocator" finished-at="2020-08-30T21:03:21Z" duration-ms="36" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadLocator -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@55fe41ea]" started-at="2020-08-30T21:03:21Z" name="afterMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@55fe41ea]" started-at="2020-08-30T21:03:22Z" name="beforeMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadProperties()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@55fe41ea]" started-at="2020-08-30T21:03:22Z" name="storeLoadProperties" finished-at="2020-08-30T21:03:22Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadProperties -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.LazyProperties@55fe41ea]" started-at="2020-08-30T21:03:22Z" name="afterMethod" finished-at="2020-08-30T21:03:22Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.LazyProperties -->
      <class name="org.jpwh.test.advanced.DerivedProperties">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@2a5c8d3f]" started-at="2020-08-30T21:03:20Z" name="beforeClass" finished-at="2020-08-30T21:03:20Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@2a5c8d3f]" started-at="2020-08-30T21:03:20Z" name="beforeMethod" finished-at="2020-08-30T21:03:21Z" duration-ms="201" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadFormula()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@2a5c8d3f]" started-at="2020-08-30T21:03:21Z" name="storeLoadFormula" finished-at="2020-08-30T21:03:21Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadFormula -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@2a5c8d3f]" started-at="2020-08-30T21:03:21Z" name="afterMethod" finished-at="2020-08-30T21:03:21Z" duration-ms="51" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@2a5c8d3f]" started-at="2020-08-30T21:03:21Z" name="beforeMethod" finished-at="2020-08-30T21:03:21Z" duration-ms="152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadFormulaSubselect()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@2a5c8d3f]" started-at="2020-08-30T21:03:21Z" name="storeLoadFormulaSubselect" finished-at="2020-08-30T21:03:21Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadFormulaSubselect -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.DerivedProperties@2a5c8d3f]" started-at="2020-08-30T21:03:21Z" name="afterMethod" finished-at="2020-08-30T21:03:21Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.DerivedProperties -->
      <class name="org.jpwh.test.advanced.MappedSubselect">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@45c7e403]" started-at="2020-08-30T21:03:22Z" name="beforeClass" finished-at="2020-08-30T21:03:22Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@45c7e403]" started-at="2020-08-30T21:03:22Z" name="beforeMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loadSubselectEntity()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@45c7e403]" started-at="2020-08-30T21:03:23Z" name="loadSubselectEntity" finished-at="2020-08-30T21:03:23Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadSubselectEntity -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.MappedSubselect@45c7e403]" started-at="2020-08-30T21:03:23Z" name="afterMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.MappedSubselect -->
      <class name="org.jpwh.test.converter.Converters">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.converter.Converters@279fedbd]" started-at="2020-08-30T21:03:20Z" name="beforeClass" finished-at="2020-08-30T21:03:20Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.converter.Converters@279fedbd]" started-at="2020-08-30T21:03:20Z" name="beforeMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadZipcode()[pri:0, instance:org.jpwh.test.converter.Converters@279fedbd]" started-at="2020-08-30T21:03:20Z" name="storeAndLoadZipcode" finished-at="2020-08-30T21:03:20Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadZipcode -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.converter.Converters@279fedbd]" started-at="2020-08-30T21:03:20Z" name="afterMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.converter.Converters@279fedbd]" started-at="2020-08-30T21:03:20Z" name="beforeMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadMonetaryAmount()[pri:0, instance:org.jpwh.test.converter.Converters@279fedbd]" started-at="2020-08-30T21:03:20Z" name="storeLoadMonetaryAmount" finished-at="2020-08-30T21:03:20Z" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadMonetaryAmount -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.converter.Converters@279fedbd]" started-at="2020-08-30T21:03:20Z" name="afterMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.converter.Converters -->
      <class name="org.jpwh.test.advanced.NestedComponents">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@24aed80c]" started-at="2020-08-30T21:03:19Z" name="beforeClass" finished-at="2020-08-30T21:03:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@24aed80c]" started-at="2020-08-30T21:03:19Z" name="beforeMethod" finished-at="2020-08-30T21:03:19Z" duration-ms="152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadUsers()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@24aed80c]" started-at="2020-08-30T21:03:19Z" name="storeAndLoadUsers" finished-at="2020-08-30T21:03:19Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsers -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.advanced.NestedComponents@24aed80c]" started-at="2020-08-30T21:03:19Z" name="afterMethod" finished-at="2020-08-30T21:03:20Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.advanced.NestedComponents -->
    </test> <!-- Advanced Mappings -->
    <test started-at="2020-08-31T01:03:23Z" name="Collections/Associations" finished-at="2020-08-31T01:03:30Z" duration-ms="7246">
      <class name="org.jpwh.test.associations.ManyToManyLinkEntity">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@707194ba]" started-at="2020-08-30T21:03:26Z" name="beforeClass" finished-at="2020-08-30T21:03:26Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@707194ba]" started-at="2020-08-30T21:03:26Z" name="beforeMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@707194ba]" started-at="2020-08-30T21:03:26Z" name="storeLoadCategoryItems" finished-at="2020-08-30T21:03:26Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyLinkEntity@707194ba]" started-at="2020-08-30T21:03:26Z" name="afterMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.ManyToManyLinkEntity -->
      <class name="org.jpwh.test.associations.OneToManyCascadePersist">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@6913c1fb]" started-at="2020-08-30T21:03:28Z" name="beforeMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@6913c1fb]" started-at="2020-08-30T21:03:28Z" name="beforeClass" finished-at="2020-08-30T21:03:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@6913c1fb]" started-at="2020-08-30T21:03:28Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:28Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadePersist@6913c1fb]" started-at="2020-08-30T21:03:28Z" name="afterMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyCascadePersist -->
      <class name="org.jpwh.test.collections.BagOfStrings">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@17f7cd29]" started-at="2020-08-30T21:03:27Z" name="beforeClass" finished-at="2020-08-30T21:03:27Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@17f7cd29]" started-at="2020-08-30T21:03:27Z" name="beforeMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@17f7cd29]" started-at="2020-08-30T21:03:27Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:27Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStrings@17f7cd29]" started-at="2020-08-30T21:03:27Z" name="afterMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.BagOfStrings -->
      <class name="org.jpwh.test.collections.EmbeddableSetOfStrings">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@13b6aecc]" started-at="2020-08-30T21:03:27Z" name="beforeMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@13b6aecc]" started-at="2020-08-30T21:03:27Z" name="beforeClass" finished-at="2020-08-30T21:03:27Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@13b6aecc]" started-at="2020-08-30T21:03:27Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:27Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.EmbeddableSetOfStrings@13b6aecc]" started-at="2020-08-30T21:03:27Z" name="afterMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.EmbeddableSetOfStrings -->
      <class name="org.jpwh.test.collections.SetOfEmbeddablesOrderBy">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@7d8704ef]" started-at="2020-08-30T21:03:24Z" name="beforeMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="220" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@7d8704ef]" started-at="2020-08-30T21:03:24Z" name="beforeClass" finished-at="2020-08-30T21:03:24Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@7d8704ef]" started-at="2020-08-30T21:03:24Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:24Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddablesOrderBy@7d8704ef]" started-at="2020-08-30T21:03:24Z" name="afterMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="57" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfEmbeddablesOrderBy -->
      <class name="org.jpwh.test.collections.MapOfStrings">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@385e9564]" started-at="2020-08-30T21:03:24Z" name="beforeMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@385e9564]" started-at="2020-08-30T21:03:24Z" name="beforeClass" finished-at="2020-08-30T21:03:24Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@385e9564]" started-at="2020-08-30T21:03:24Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:24Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStrings@385e9564]" started-at="2020-08-30T21:03:24Z" name="afterMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfStrings -->
      <class name="org.jpwh.test.associations.OneToOneForeignKey">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3c3d9b6b]" started-at="2020-08-30T21:03:23Z" name="beforeMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3c3d9b6b]" started-at="2020-08-30T21:03:23Z" name="beforeClass" finished-at="2020-08-30T21:03:23Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3c3d9b6b]" started-at="2020-08-30T21:03:23Z" name="storeAndLoadUserAddress" finished-at="2020-08-30T21:03:23Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3c3d9b6b]" started-at="2020-08-30T21:03:23Z" name="afterMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3c3d9b6b]" started-at="2020-08-30T21:03:23Z" name="beforeMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeNonUniqueRelationship()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3c3d9b6b]" started-at="2020-08-30T21:03:24Z" name="storeNonUniqueRelationship" finished-at="2020-08-30T21:03:24Z" duration-ms="13" status="PASS">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.associations.OneToOneForeignKey.storeNonUniqueRelationship(OneToOneForeignKey.java:80)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Unique index or primary key violation: "UK_OB48MBNFMUFD417FO9SWUHFBV_INDEX_4 ON PUBLIC.USERS(SHIPPINGADDRESS_ID)"; SQL statement:
/* insert org.jpwh.model.associations.onetoone.foreignkey.User */ insert into USERS (shippingAddress_id, username, id) values (?, ?, ?) [23505-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.index.BaseIndex.getDuplicateKeyException(BaseIndex.java:82)
	at org.h2.index.TreeIndex.add(TreeIndex.java:62)
	at org.h2.table.RegularTable.addRow(RegularTable.java:122)
	at org.h2.command.dml.Insert.insertRows(Insert.java:124)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy20.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeNonUniqueRelationship -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignKey@3c3d9b6b]" started-at="2020-08-30T21:03:24Z" name="afterMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneForeignKey -->
      <class name="org.jpwh.test.collections.MapOfStringsEmbeddables">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@c0c2f8d]" started-at="2020-08-30T21:03:28Z" name="beforeClass" finished-at="2020-08-30T21:03:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@c0c2f8d]" started-at="2020-08-30T21:03:28Z" name="beforeMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@c0c2f8d]" started-at="2020-08-30T21:03:28Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:28Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsEmbeddables@c0c2f8d]" started-at="2020-08-30T21:03:28Z" name="afterMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="58" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfStringsEmbeddables -->
      <class name="org.jpwh.test.associations.MapsMapKey">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@5fbe4146]" started-at="2020-08-30T21:03:24Z" name="beforeMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@5fbe4146]" started-at="2020-08-30T21:03:24Z" name="beforeClass" finished-at="2020-08-30T21:03:24Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@5fbe4146]" started-at="2020-08-30T21:03:24Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:24Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.MapsMapKey@5fbe4146]" started-at="2020-08-30T21:03:24Z" name="afterMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.MapsMapKey -->
      <class name="org.jpwh.test.associations.MapsTernary">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.MapsTernary@5aebe890]" started-at="2020-08-30T21:03:24Z" name="beforeMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.MapsTernary@5aebe890]" started-at="2020-08-30T21:03:24Z" name="beforeClass" finished-at="2020-08-30T21:03:24Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.MapsTernary@5aebe890]" started-at="2020-08-30T21:03:24Z" name="storeLoadCategoryItems" finished-at="2020-08-30T21:03:24Z" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.MapsTernary@5aebe890]" started-at="2020-08-30T21:03:24Z" name="afterMethod" finished-at="2020-08-30T21:03:24Z" duration-ms="65" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.MapsTernary -->
      <class name="org.jpwh.test.associations.OneToManyCascadeRemove">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@33c911a1]" started-at="2020-08-30T21:03:28Z" name="beforeClass" finished-at="2020-08-30T21:03:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@33c911a1]" started-at="2020-08-30T21:03:28Z" name="beforeMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@33c911a1]" started-at="2020-08-30T21:03:28Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:28Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyCascadeRemove@33c911a1]" started-at="2020-08-30T21:03:28Z" name="afterMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyCascadeRemove -->
      <class name="org.jpwh.test.collections.SetOfStrings">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@63475ace]" started-at="2020-08-30T21:03:27Z" name="beforeClass" finished-at="2020-08-30T21:03:27Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@63475ace]" started-at="2020-08-30T21:03:27Z" name="beforeMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@63475ace]" started-at="2020-08-30T21:03:28Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:28Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStrings@63475ace]" started-at="2020-08-30T21:03:28Z" name="afterMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="42" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfStrings -->
      <class name="org.jpwh.test.associations.OneToManyBag">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@71e9ddb4]" started-at="2020-08-30T21:03:30Z" name="beforeClass" finished-at="2020-08-30T21:03:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@71e9ddb4]" started-at="2020-08-30T21:03:30Z" name="beforeMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@71e9ddb4]" started-at="2020-08-30T21:03:30Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:30Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBag@71e9ddb4]" started-at="2020-08-30T21:03:30Z" name="afterMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyBag -->
      <class name="org.jpwh.test.collections.SortedMapOfStrings">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@75db5df9]" started-at="2020-08-30T21:03:26Z" name="beforeClass" finished-at="2020-08-30T21:03:26Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@75db5df9]" started-at="2020-08-30T21:03:26Z" name="beforeMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@75db5df9]" started-at="2020-08-30T21:03:26Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:26Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SortedMapOfStrings@75db5df9]" started-at="2020-08-30T21:03:26Z" name="afterMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SortedMapOfStrings -->
      <class name="org.jpwh.test.collections.SetOfStringsOrderBy">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@4988d8b8]" started-at="2020-08-30T21:03:25Z" name="beforeMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@4988d8b8]" started-at="2020-08-30T21:03:25Z" name="beforeClass" finished-at="2020-08-30T21:03:25Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@4988d8b8]" started-at="2020-08-30T21:03:26Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:26Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfStringsOrderBy@4988d8b8]" started-at="2020-08-30T21:03:26Z" name="afterMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfStringsOrderBy -->
      <class name="org.jpwh.test.associations.OneToManyEmbeddableJoinTable">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@305b7c14]" started-at="2020-08-30T21:03:23Z" name="beforeMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@305b7c14]" started-at="2020-08-30T21:03:23Z" name="beforeClass" finished-at="2020-08-30T21:03:23Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeAndLoadUsersShipments()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@305b7c14]" started-at="2020-08-30T21:03:23Z" name="storeAndLoadUsersShipments" finished-at="2020-08-30T21:03:23Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsersShipments -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddableJoinTable@305b7c14]" started-at="2020-08-30T21:03:23Z" name="afterMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyEmbeddableJoinTable -->
      <class name="org.jpwh.test.associations.OneToOneJoinTable">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@7530ad9c]" started-at="2020-08-30T21:03:25Z" name="beforeClass" finished-at="2020-08-30T21:03:25Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@7530ad9c]" started-at="2020-08-30T21:03:25Z" name="beforeMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@7530ad9c]" started-at="2020-08-30T21:03:25Z" name="storeAndLoadUserAddress" finished-at="2020-08-30T21:03:25Z" duration-ms="2" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetoone.jointable.Shipment.auction]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetoone.jointable.Shipment.auction
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1692)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1152)
	at org.jpwh.test.associations.OneToOneJoinTable.storeAndLoadUserAddress(OneToOneJoinTable.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetoone.jointable.Shipment.auction
	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:92)
	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:115)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:124)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:185)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:163)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:150)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:325)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:272)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:178)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:121)
	at org.hibernate.jpa.event.internal.core.JpaPersistEventListener.saveWithGeneratedId(JpaPersistEventListener.java:67)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:189)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:132)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:58)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:747)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:752)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1146)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@7530ad9c]" started-at="2020-08-30T21:03:25Z" name="afterMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@7530ad9c]" started-at="2020-08-30T21:03:25Z" name="beforeMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeNonUniqueRelationship()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@7530ad9c]" started-at="2020-08-30T21:03:25Z" name="storeNonUniqueRelationship" finished-at="2020-08-30T21:03:25Z" duration-ms="7" status="PASS">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2829)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.associations.OneToOneJoinTable.storeNonUniqueRelationship(OneToOneJoinTable.java:81)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Unique index or primary key violation: "UK_EW9CIRVGSIAOHXF5NNVFBOS2V_INDEX_3 ON PUBLIC.ITEM_SHIPMENT(ITEM_ID)"; SQL statement:
/* insert org.jpwh.model.associations.onetoone.jointable.Shipment */ insert into ITEM_SHIPMENT (ITEM_ID, SHIPMENT_ID) values (?, ?) [23505-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.index.BaseIndex.getDuplicateKeyException(BaseIndex.java:82)
	at org.h2.index.TreeIndex.add(TreeIndex.java:62)
	at org.h2.table.RegularTable.addRow(RegularTable.java:122)
	at org.h2.command.dml.Insert.insertRows(Insert.java:124)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy20.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeNonUniqueRelationship -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneJoinTable@7530ad9c]" started-at="2020-08-30T21:03:25Z" name="afterMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="42" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneJoinTable -->
      <class name="org.jpwh.test.associations.OneToManyOnDeleteCascade">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@bccb269]" started-at="2020-08-30T21:03:29Z" name="beforeClass" finished-at="2020-08-30T21:03:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@bccb269]" started-at="2020-08-30T21:03:29Z" name="beforeMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="171" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@bccb269]" started-at="2020-08-30T21:03:29Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:29Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOnDeleteCascade@bccb269]" started-at="2020-08-30T21:03:29Z" name="afterMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="60" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyOnDeleteCascade -->
      <class name="org.jpwh.test.collections.SortedSetOfStrings">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@291caca8]" started-at="2020-08-30T21:03:23Z" name="beforeClass" finished-at="2020-08-30T21:03:23Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@291caca8]" started-at="2020-08-30T21:03:23Z" name="beforeMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@291caca8]" started-at="2020-08-30T21:03:23Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:23Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SortedSetOfStrings@291caca8]" started-at="2020-08-30T21:03:23Z" name="afterMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SortedSetOfStrings -->
      <class name="org.jpwh.test.associations.OneToOneForeignGenerator">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@6a2f6f80]" started-at="2020-08-30T21:03:29Z" name="beforeMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@6a2f6f80]" started-at="2020-08-30T21:03:29Z" name="beforeClass" finished-at="2020-08-30T21:03:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@6a2f6f80]" started-at="2020-08-30T21:03:29Z" name="storeAndLoadUserAddress" finished-at="2020-08-30T21:03:29Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneForeignGenerator@6a2f6f80]" started-at="2020-08-30T21:03:29Z" name="afterMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneForeignGenerator -->
      <class name="org.jpwh.test.associations.ManyToManyTernary">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@58a9760d]" started-at="2020-08-30T21:03:29Z" name="beforeClass" finished-at="2020-08-30T21:03:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@58a9760d]" started-at="2020-08-30T21:03:29Z" name="beforeMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@58a9760d]" started-at="2020-08-30T21:03:30Z" name="storeLoadCategoryItems" finished-at="2020-08-30T21:03:30Z" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyTernary@58a9760d]" started-at="2020-08-30T21:03:30Z" name="afterMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.ManyToManyTernary -->
      <class name="org.jpwh.test.associations.OneToManyList">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyList@79d8407f]" started-at="2020-08-30T21:03:25Z" name="beforeClass" finished-at="2020-08-30T21:03:25Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyList@79d8407f]" started-at="2020-08-30T21:03:25Z" name="beforeMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyList@79d8407f]" started-at="2020-08-30T21:03:25Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:25Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyList@79d8407f]" started-at="2020-08-30T21:03:25Z" name="afterMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyList -->
      <class name="org.jpwh.test.associations.OneToManyOrphanRemoval">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@399c4be1]" started-at="2020-08-30T21:03:26Z" name="beforeClass" finished-at="2020-08-30T21:03:26Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@399c4be1]" started-at="2020-08-30T21:03:26Z" name="beforeMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@399c4be1]" started-at="2020-08-30T21:03:26Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:26Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyOrphanRemoval@399c4be1]" started-at="2020-08-30T21:03:26Z" name="afterMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyOrphanRemoval -->
      <class name="org.jpwh.test.associations.OneToManyJoinTable">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@65d09a04]" started-at="2020-08-30T21:03:26Z" name="beforeClass" finished-at="2020-08-30T21:03:26Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@65d09a04]" started-at="2020-08-30T21:03:26Z" name="beforeMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemUsers()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@65d09a04]" started-at="2020-08-30T21:03:27Z" name="storeAndLoadItemUsers" finished-at="2020-08-30T21:03:27Z" duration-ms="1" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetomany.jointable.Item.buyer]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetomany.jointable.Item.buyer
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1692)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1152)
	at org.jpwh.test.associations.OneToManyJoinTable.storeAndLoadItemUsers(OneToManyJoinTable.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetomany.jointable.Item.buyer
	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:92)
	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:115)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:124)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:185)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:163)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:150)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:325)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:272)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:178)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:121)
	at org.hibernate.jpa.event.internal.core.JpaPersistEventListener.saveWithGeneratedId(JpaPersistEventListener.java:67)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:189)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:132)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:58)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:747)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:752)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1146)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemUsers -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyJoinTable@65d09a04]" started-at="2020-08-30T21:03:27Z" name="afterMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="41" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyJoinTable -->
      <class name="org.jpwh.test.collections.BagOfStringsOrderBy">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@4e50c791]" started-at="2020-08-30T21:03:25Z" name="beforeMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@4e50c791]" started-at="2020-08-30T21:03:25Z" name="beforeClass" finished-at="2020-08-30T21:03:25Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@4e50c791]" started-at="2020-08-30T21:03:25Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:25Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.BagOfStringsOrderBy@4e50c791]" started-at="2020-08-30T21:03:25Z" name="afterMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.BagOfStringsOrderBy -->
      <class name="org.jpwh.test.associations.OneToManyEmbeddable">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@1e66f1f5]" started-at="2020-08-30T21:03:29Z" name="beforeClass" finished-at="2020-08-30T21:03:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@1e66f1f5]" started-at="2020-08-30T21:03:29Z" name="beforeMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadUsersShipments()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@1e66f1f5]" started-at="2020-08-30T21:03:29Z" name="storeAndLoadUsersShipments" finished-at="2020-08-30T21:03:29Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsersShipments -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyEmbeddable@1e66f1f5]" started-at="2020-08-30T21:03:29Z" name="afterMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyEmbeddable -->
      <class name="org.jpwh.test.collections.MapOfStringsOrderBy">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@158a8276]" started-at="2020-08-30T21:03:29Z" name="beforeClass" finished-at="2020-08-30T21:03:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@158a8276]" started-at="2020-08-30T21:03:29Z" name="beforeMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="158" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@158a8276]" started-at="2020-08-30T21:03:29Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:29Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfStringsOrderBy@158a8276]" started-at="2020-08-30T21:03:29Z" name="afterMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="59" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfStringsOrderBy -->
      <class name="org.jpwh.test.associations.ManyToManyBidirectional">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@394df057]" started-at="2020-08-30T21:03:27Z" name="beforeClass" finished-at="2020-08-30T21:03:27Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@394df057]" started-at="2020-08-30T21:03:27Z" name="beforeMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCategoryItems()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@394df057]" started-at="2020-08-30T21:03:27Z" name="storeLoadCategoryItems" finished-at="2020-08-30T21:03:27Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCategoryItems -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.ManyToManyBidirectional@394df057]" started-at="2020-08-30T21:03:27Z" name="afterMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.ManyToManyBidirectional -->
      <class name="org.jpwh.test.collections.BagOfEmbeddables">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@4961f6af]" started-at="2020-08-30T21:03:26Z" name="beforeClass" finished-at="2020-08-30T21:03:26Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@4961f6af]" started-at="2020-08-30T21:03:26Z" name="beforeMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@4961f6af]" started-at="2020-08-30T21:03:26Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:26Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.BagOfEmbeddables@4961f6af]" started-at="2020-08-30T21:03:26Z" name="afterMethod" finished-at="2020-08-30T21:03:26Z" duration-ms="41" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.BagOfEmbeddables -->
      <class name="org.jpwh.test.collections.MapOfEmbeddables">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b94b04d]" started-at="2020-08-30T21:03:28Z" name="beforeMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b94b04d]" started-at="2020-08-30T21:03:28Z" name="beforeClass" finished-at="2020-08-30T21:03:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b94b04d]" started-at="2020-08-30T21:03:28Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:28Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.MapOfEmbeddables@5b94b04d]" started-at="2020-08-30T21:03:28Z" name="afterMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.MapOfEmbeddables -->
      <class name="org.jpwh.test.associations.OneToOneSharedPrimaryKey">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@609cd4d8]" started-at="2020-08-30T21:03:27Z" name="beforeClass" finished-at="2020-08-30T21:03:27Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@609cd4d8]" started-at="2020-08-30T21:03:27Z" name="beforeMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="168" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadUserAddress()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@609cd4d8]" started-at="2020-08-30T21:03:27Z" name="storeAndLoadUserAddress" finished-at="2020-08-30T21:03:27Z" duration-ms="2" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetoone.sharedprimarykey.User.shippingAddress]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetoone.sharedprimarykey.User.shippingAddress
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1692)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1152)
	at org.jpwh.test.associations.OneToOneSharedPrimaryKey.storeAndLoadUserAddress(OneToOneSharedPrimaryKey.java:39)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.associations.onetoone.sharedprimarykey.User.shippingAddress
	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:92)
	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:115)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:124)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:185)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:163)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:150)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:325)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:272)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:178)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:121)
	at org.hibernate.jpa.event.internal.core.JpaPersistEventListener.saveWithGeneratedId(JpaPersistEventListener.java:67)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:189)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:132)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:58)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:747)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:752)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1146)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUserAddress -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToOneSharedPrimaryKey@609cd4d8]" started-at="2020-08-30T21:03:27Z" name="afterMethod" finished-at="2020-08-30T21:03:27Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToOneSharedPrimaryKey -->
      <class name="org.jpwh.test.collections.SetOfEmbeddables">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@1190200a]" started-at="2020-08-30T21:03:24Z" name="beforeClass" finished-at="2020-08-30T21:03:24Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@1190200a]" started-at="2020-08-30T21:03:24Z" name="beforeMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@1190200a]" started-at="2020-08-30T21:03:25Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:25Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.SetOfEmbeddables@1190200a]" started-at="2020-08-30T21:03:25Z" name="afterMethod" finished-at="2020-08-30T21:03:25Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.SetOfEmbeddables -->
      <class name="org.jpwh.test.associations.OneToManyBidirectional">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@66d18979]" started-at="2020-08-30T21:03:28Z" name="beforeClass" finished-at="2020-08-30T21:03:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@66d18979]" started-at="2020-08-30T21:03:28Z" name="beforeMethod" finished-at="2020-08-30T21:03:28Z" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadItemBids()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@66d18979]" started-at="2020-08-30T21:03:28Z" name="storeAndLoadItemBids" finished-at="2020-08-30T21:03:29Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadItemBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.associations.OneToManyBidirectional@66d18979]" started-at="2020-08-30T21:03:29Z" name="afterMethod" finished-at="2020-08-30T21:03:29Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.associations.OneToManyBidirectional -->
      <class name="org.jpwh.test.collections.ListOfStrings">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@45b4c3a9]" started-at="2020-08-30T21:03:23Z" name="beforeClass" finished-at="2020-08-30T21:03:23Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@45b4c3a9]" started-at="2020-08-30T21:03:23Z" name="beforeMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="158" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCollection()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@45b4c3a9]" started-at="2020-08-30T21:03:23Z" name="storeLoadCollection" finished-at="2020-08-30T21:03:23Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.collections.ListOfStrings@45b4c3a9]" started-at="2020-08-30T21:03:23Z" name="afterMethod" finished-at="2020-08-30T21:03:23Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.collections.ListOfStrings -->
    </test> <!-- Collections/Associations -->
    <test started-at="2020-08-31T01:03:30Z" name="Complex Schemas" finished-at="2020-08-31T01:03:33Z" duration-ms="3108">
      <class name="org.jpwh.test.complexschemas.CompositeKeyMapsId">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@37883b97]" started-at="2020-08-30T21:03:32Z" name="beforeMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@37883b97]" started-at="2020-08-30T21:03:32Z" name="beforeClass" finished-at="2020-08-30T21:03:32Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@37883b97]" started-at="2020-08-30T21:03:33Z" name="storeLoad" finished-at="2020-08-30T21:03:33Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyMapsId@37883b97]" started-at="2020-08-30T21:03:33Z" name="afterMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyMapsId -->
      <class name="org.jpwh.test.complexschemas.NaturalForeignKey">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@37271612]" started-at="2020-08-30T21:03:33Z" name="beforeClass" finished-at="2020-08-30T21:03:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@37271612]" started-at="2020-08-30T21:03:33Z" name="beforeMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@37271612]" started-at="2020-08-30T21:03:33Z" name="storeLoad" finished-at="2020-08-30T21:03:33Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalForeignKey@37271612]" started-at="2020-08-30T21:03:33Z" name="afterMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.NaturalForeignKey -->
      <class name="org.jpwh.test.complexschemas.SecondaryTable">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@ed7f8b4]" started-at="2020-08-30T21:03:30Z" name="beforeClass" finished-at="2020-08-30T21:03:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@ed7f8b4]" started-at="2020-08-30T21:03:30Z" name="beforeMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeAndLoadUsers()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@ed7f8b4]" started-at="2020-08-30T21:03:30Z" name="storeAndLoadUsers" finished-at="2020-08-30T21:03:30Z" duration-ms="1" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.complexschemas.secondarytable.User.billingAddress]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.complexschemas.secondarytable.User.billingAddress
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1692)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1152)
	at org.jpwh.test.complexschemas.SecondaryTable.storeAndLoadUsers(SecondaryTable.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.jpwh.model.complexschemas.secondarytable.User.billingAddress
	at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:92)
	at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:115)
	at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:124)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:185)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:163)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:150)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:325)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:272)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:178)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:121)
	at org.hibernate.jpa.event.internal.core.JpaPersistEventListener.saveWithGeneratedId(JpaPersistEventListener.java:67)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:189)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:132)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:58)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:747)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:752)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1146)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeAndLoadUsers -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.SecondaryTable@ed7f8b4]" started-at="2020-08-30T21:03:30Z" name="afterMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="51" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.SecondaryTable -->
      <class name="org.jpwh.test.complexschemas.NaturalPrimaryKey">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@4e3958e7]" started-at="2020-08-30T21:03:32Z" name="beforeMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@4e3958e7]" started-at="2020-08-30T21:03:32Z" name="beforeClass" finished-at="2020-08-30T21:03:32Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@4e3958e7]" started-at="2020-08-30T21:03:32Z" name="storeLoad" finished-at="2020-08-30T21:03:32Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.NaturalPrimaryKey@4e3958e7]" started-at="2020-08-30T21:03:32Z" name="afterMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="66" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.NaturalPrimaryKey -->
      <class name="org.jpwh.test.complexschemas.CompositeKeyEmbeddedId">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@77f80c04]" started-at="2020-08-30T21:03:32Z" name="beforeMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@77f80c04]" started-at="2020-08-30T21:03:32Z" name="beforeClass" finished-at="2020-08-30T21:03:32Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@77f80c04]" started-at="2020-08-30T21:03:32Z" name="storeLoad" finished-at="2020-08-30T21:03:32Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyEmbeddedId@77f80c04]" started-at="2020-08-30T21:03:32Z" name="afterMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyEmbeddedId -->
      <class name="org.jpwh.test.complexschemas.CompositeKeyManyToOne">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@38102d01]" started-at="2020-08-30T21:03:33Z" name="beforeClass" finished-at="2020-08-30T21:03:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@38102d01]" started-at="2020-08-30T21:03:33Z" name="beforeMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@38102d01]" started-at="2020-08-30T21:03:33Z" name="storeLoad" finished-at="2020-08-30T21:03:33Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyManyToOne@38102d01]" started-at="2020-08-30T21:03:33Z" name="afterMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyManyToOne -->
      <class name="org.jpwh.test.complexschemas.CustomSchema">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:30Z" name="beforeClass" finished-at="2020-08-30T21:03:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:30Z" name="beforeMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:30Z" name="afterMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="61" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="configurePersistenceUnit()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:30Z" name="configurePersistenceUnit" finished-at="2020-08-30T21:03:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configurePersistenceUnit -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:30Z" name="beforeMethod" finished-at="2020-08-30T21:03:30Z" duration-ms="177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCheckColumnInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:30Z" name="storeLoadCheckColumnInvalid" finished-at="2020-08-30T21:03:30Z" duration-ms="8" status="PASS">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadCheckColumnInvalid(CustomSchema.java:64)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Check constraint violation: "(SUBSTRING(LOWER(USERNAME), 0, 5) <> 'admin')"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.User */ insert into USERS (email, username, id) values (?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:305)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:692)
	at org.h2.command.dml.Insert.insertRows(Insert.java:120)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy20.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCheckColumnInvalid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:30Z" name="afterMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="57" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="beforeMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCheckSingleRowInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="storeLoadCheckSingleRowInvalid" finished-at="2020-08-30T21:03:31Z" duration-ms="4" status="PASS">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadCheckSingleRowInvalid(CustomSchema.java:85)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Check constraint violation: "CONSTRAINT_22: (AUCTIONSTART < AUCTIONEND)"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.Item */ insert into Item (auctionEnd, auctionStart, name, id) values (?, ?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.constraint.ConstraintCheck.checkRow(ConstraintCheck.java:92)
	at org.h2.table.Table.fireConstraints(Table.java:873)
	at org.h2.table.Table.fireBeforeRow(Table.java:863)
	at org.h2.command.dml.Insert.insertRows(Insert.java:121)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy20.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCheckSingleRowInvalid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="afterMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="beforeMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadCheckSubselectValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="storeLoadCheckSubselectValid" finished-at="2020-08-30T21:03:31Z" duration-ms="5" status="PASS">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadCheckSubselectValid(CustomSchema.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Check constraint violation: "AUCTION_BID_TIME: (CREATEDON <= (SELECT
    I.AUCTIONEND
FROM PUBLIC.ITEM I
    /* PUBLIC.PRIMARY_KEY_2: ID = ITEM_ID */
    /* scanCount: 2 */
WHERE I.ID = ITEM_ID))"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.Bid */ insert into Bid (amount, createdOn, ITEM_ID, id) values (?, ?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.constraint.ConstraintCheck.checkRow(ConstraintCheck.java:92)
	at org.h2.table.Table.fireConstraints(Table.java:873)
	at org.h2.table.Table.fireBeforeRow(Table.java:863)
	at org.h2.command.dml.Insert.insertRows(Insert.java:121)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy20.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadCheckSubselectValid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="afterMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="69" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="beforeMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="191" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadDomainInvalid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="storeLoadDomainInvalid" finished-at="2020-08-30T21:03:31Z" duration-ms="3" status="PASS">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadDomainInvalid(CustomSchema.java:42)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Check constraint violation: "(POSITION('@', EMAIL) > 1)"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.User */ insert into USERS (email, username, id) values (?, ?, ?) [23513-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:305)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:692)
	at org.h2.command.dml.Insert.insertRows(Insert.java:120)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy20.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadDomainInvalid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="afterMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="72" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="beforeMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadUniqueMultiColumnValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="storeLoadUniqueMultiColumnValid" finished-at="2020-08-30T21:03:31Z" duration-ms="3" status="PASS">
          <exception class="org.hibernate.exception.ConstraintViolationException">
            <message>
              <![CDATA[could not execute statement]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:207)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2823)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3323)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	at org.jpwh.test.complexschemas.CustomSchema.storeLoadUniqueMultiColumnValid(CustomSchema.java:112)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.h2.jdbc.JdbcSQLException: Unique index or primary key violation: "CONSTRAINT_INDEX_4 ON PUBLIC.USERS(USERNAME)"; SQL statement:
/* insert org.jpwh.model.complexschemas.custom.User */ insert into USERS (email, username, id) values (?, ?, ?) [23505-171]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329)
	at org.h2.message.DbException.get(DbException.java:169)
	at org.h2.message.DbException.get(DbException.java:146)
	at org.h2.index.BaseIndex.getDuplicateKeyException(BaseIndex.java:82)
	at org.h2.index.TreeIndex.add(TreeIndex.java:62)
	at org.h2.table.RegularTable.addRow(RegularTable.java:122)
	at org.h2.command.dml.Insert.insertRows(Insert.java:124)
	at org.h2.command.dml.Insert.update(Insert.java:84)
	at org.h2.command.CommandContainer.update(CommandContainer.java:75)
	at org.h2.command.Command.executeUpdate(Command.java:230)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:156)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:142)
	at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bitronix.tm.resource.jdbc.BaseProxyHandlerClass.invoke(BaseProxyHandlerClass.java:64)
	at com.sun.proxy.$Proxy20.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.exception.ConstraintViolationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadUniqueMultiColumnValid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="afterMethod" finished-at="2020-08-30T21:03:31Z" duration-ms="54" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:31Z" name="beforeMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="storeLoadValid()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:32Z" name="storeLoadValid" finished-at="2020-08-30T21:03:32Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoadValid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CustomSchema@4c309d4d]" started-at="2020-08-30T21:03:32Z" name="afterMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CustomSchema -->
      <class name="org.jpwh.test.complexschemas.CompositeKeyReadOnly">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@6ab778a]" started-at="2020-08-30T21:03:32Z" name="beforeMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@6ab778a]" started-at="2020-08-30T21:03:32Z" name="beforeClass" finished-at="2020-08-30T21:03:32Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="storeLoad()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@6ab778a]" started-at="2020-08-30T21:03:32Z" name="storeLoad" finished-at="2020-08-30T21:03:32Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeLoad -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.complexschemas.CompositeKeyReadOnly@6ab778a]" started-at="2020-08-30T21:03:32Z" name="afterMethod" finished-at="2020-08-30T21:03:32Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.complexschemas.CompositeKeyReadOnly -->
    </test> <!-- Complex Schemas -->
    <test started-at="2020-08-31T01:03:33Z" name="Concurrency Control" finished-at="2020-08-31T01:03:37Z" duration-ms="4427">
      <class name="org.jpwh.test.concurrency.VersioningAll">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@394a2528]" started-at="2020-08-30T21:03:37Z" name="beforeClass" finished-at="2020-08-30T21:03:37Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@394a2528]" started-at="2020-08-30T21:03:37Z" name="beforeMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@394a2528]" started-at="2020-08-30T21:03:37Z" name="firstCommitWins" finished-at="2020-08-30T21:03:37Z" duration-ms="8" status="PASS">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.internal.EntityManagerImpl$CallbackExceptionMapperImpl.mapManagedFlushFailure(EntityManagerImpl.java:235)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2898)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2270)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.VersioningAll.firstCommitWins(VersioningAll.java:65)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:464)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2894)
	... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningAll@394a2528]" started-at="2020-08-30T21:03:37Z" name="afterMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.VersioningAll -->
      <class name="org.jpwh.test.concurrency.Locking">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="beforeClass" finished-at="2020-08-30T21:03:34Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="beforeMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="extendedLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="extendedLock" finished-at="2020-08-30T21:03:34Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extendedLock -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="afterMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="41" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="beforeMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="findLock()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="findLock" finished-at="2020-08-30T21:03:34Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findLock -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="afterMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="beforeMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="pessimisticReadWrite()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:34Z" name="pessimisticReadWrite" finished-at="2020-08-30T21:03:36Z" duration-ms="2017" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pessimisticReadWrite -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:36Z" name="afterMethod" finished-at="2020-08-30T21:03:36Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:36Z" name="beforeMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="firstCommitWins" finished-at="2020-08-30T21:03:37Z" duration-ms="8" status="PASS">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1303)
	at org.jpwh.test.concurrency.Versioning.firstCommitWins(Versioning.java:95)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="afterMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="beforeMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="forceIncrement()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="forceIncrement" finished-at="2020-08-30T21:03:37Z" duration-ms="13" status="PASS">
          <exception class="org.hibernate.StaleObjectStateException">
            <message>
              <![CDATA[Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]
	at org.hibernate.persister.entity.AbstractEntityPersister.forceVersionIncrement(AbstractEntityPersister.java:1555)
	at org.hibernate.action.internal.EntityIncrementVersionProcess.doBeforeTransactionCompletion(EntityIncrementVersionProcess.java:43)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.forceIncrement(Versioning.java:279)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.StaleObjectStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forceIncrement -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="afterMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="beforeMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="manualVersionChecking()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="manualVersionChecking" finished-at="2020-08-30T21:03:37Z" duration-ms="20" status="PASS">
          <exception class="org.hibernate.OptimisticLockException">
            <message>
              <![CDATA[Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.OptimisticLockException: Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database
	at org.hibernate.action.internal.EntityVerifyVersionProcess.doBeforeTransactionCompletion(EntityVerifyVersionProcess.java:51)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.manualVersionChecking(Versioning.java:176)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- manualVersionChecking -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Locking@32910148]" started-at="2020-08-30T21:03:37Z" name="afterMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.Locking -->
      <class name="org.jpwh.test.concurrency.Versioning">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:33Z" name="beforeMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:33Z" name="beforeClass" finished-at="2020-08-30T21:03:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:33Z" name="firstCommitWins" finished-at="2020-08-30T21:03:33Z" duration-ms="22" status="PASS">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1303)
	at org.jpwh.test.concurrency.Versioning.firstCommitWins(Versioning.java:95)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1300)
	... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:33Z" name="afterMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:33Z" name="beforeMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="160" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="forceIncrement()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:34Z" name="forceIncrement" finished-at="2020-08-30T21:03:34Z" duration-ms="25" status="PASS">
          <exception class="org.hibernate.StaleObjectStateException">
            <message>
              <![CDATA[Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [org.jpwh.model.concurrency.version.Item#1000]
	at org.hibernate.persister.entity.AbstractEntityPersister.forceVersionIncrement(AbstractEntityPersister.java:1555)
	at org.hibernate.action.internal.EntityIncrementVersionProcess.doBeforeTransactionCompletion(EntityIncrementVersionProcess.java:43)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.forceIncrement(Versioning.java:279)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.StaleObjectStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forceIncrement -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:34Z" name="afterMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:34Z" name="beforeMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="manualVersionChecking()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:34Z" name="manualVersionChecking" finished-at="2020-08-30T21:03:34Z" duration-ms="22" status="PASS">
          <exception class="org.hibernate.OptimisticLockException">
            <message>
              <![CDATA[Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.hibernate.OptimisticLockException: Newer version [1] of entity [[org.jpwh.model.concurrency.version.Item#1001]] found in database
	at org.hibernate.action.internal.EntityVerifyVersionProcess.doBeforeTransactionCompletion(EntityVerifyVersionProcess.java:51)
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:706)
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:373)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2271)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.Versioning.manualVersionChecking(Versioning.java:176)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- org.hibernate.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- manualVersionChecking -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.Versioning@2b4bac49]" started-at="2020-08-30T21:03:34Z" name="afterMethod" finished-at="2020-08-30T21:03:34Z" duration-ms="42" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.Versioning -->
      <class name="org.jpwh.test.concurrency.NonTransactional">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f56875e]" started-at="2020-08-30T21:03:33Z" name="beforeMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f56875e]" started-at="2020-08-30T21:03:33Z" name="beforeClass" finished-at="2020-08-30T21:03:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="autoCommit()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f56875e]" started-at="2020-08-30T21:03:33Z" name="autoCommit" finished-at="2020-08-30T21:03:33Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- autoCommit -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.NonTransactional@3f56875e]" started-at="2020-08-30T21:03:33Z" name="afterMethod" finished-at="2020-08-30T21:03:33Z" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.NonTransactional -->
      <class name="org.jpwh.test.concurrency.VersioningTimestamp">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@fd07cbb]" started-at="2020-08-30T21:03:37Z" name="beforeClass" finished-at="2020-08-30T21:03:37Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@fd07cbb]" started-at="2020-08-30T21:03:37Z" name="beforeMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="firstCommitWins()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@fd07cbb]" started-at="2020-08-30T21:03:37Z" name="firstCommitWins" finished-at="2020-08-30T21:03:37Z" duration-ms="6" status="PASS">
          <exception class="javax.persistence.OptimisticLockException">
            <message>
              <![CDATA[Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.OptimisticLockException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.wrapStaleStateException(AbstractEntityManagerImpl.java:1729)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1634)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.internal.EntityManagerImpl$CallbackExceptionMapperImpl.mapManagedFlushFailure(EntityManagerImpl.java:235)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2898)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2270)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:485)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:316)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
	at bitronix.tm.BitronixTransaction.fireBeforeCompletionEvent(BitronixTransaction.java:532)
	at bitronix.tm.BitronixTransaction.commit(BitronixTransaction.java:235)
	at bitronix.tm.BitronixTransactionManager.commit(BitronixTransactionManager.java:143)
	at org.jpwh.test.concurrency.VersioningTimestamp.firstCommitWins(VersioningTimestamp.java:65)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1
	at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:67)
	at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:54)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3008)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2887)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3267)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:447)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:333)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:335)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1224)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:464)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2894)
	... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.OptimisticLockException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstCommitWins -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.concurrency.VersioningTimestamp@fd07cbb]" started-at="2020-08-30T21:03:37Z" name="afterMethod" finished-at="2020-08-30T21:03:37Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.concurrency.VersioningTimestamp -->
    </test> <!-- Concurrency Control -->
    <test started-at="2020-08-31T01:03:37Z" name="Conversations" finished-at="2020-08-31T01:03:38Z" duration-ms="567">
      <class name="org.jpwh.test.conversation.ExtendedPC">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" started-at="2020-08-30T21:03:37Z" name="beforeMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" started-at="2020-08-30T21:03:37Z" name="beforeClass" finished-at="2020-08-30T21:03:37Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="conversationCreateItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" started-at="2020-08-30T21:03:38Z" name="conversationCreateItem" finished-at="2020-08-30T21:03:38Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- conversationCreateItem -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" started-at="2020-08-30T21:03:38Z" name="afterMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" started-at="2020-08-30T21:03:38Z" name="beforeMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="conversationEditItem()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" started-at="2020-08-30T21:03:38Z" name="conversationEditItem" finished-at="2020-08-30T21:03:38Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- conversationEditItem -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.conversation.ExtendedPC@f2ff811]" started-at="2020-08-30T21:03:38Z" name="afterMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.conversation.ExtendedPC -->
      <class name="org.jpwh.test.conversation.Detached">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.conversation.Detached@568ff82]" started-at="2020-08-30T21:03:38Z" name="beforeClass" finished-at="2020-08-30T21:03:38Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.conversation.Detached@568ff82]" started-at="2020-08-30T21:03:38Z" name="beforeMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="businessKeyEquality()[pri:0, instance:org.jpwh.test.conversation.Detached@568ff82]" started-at="2020-08-30T21:03:38Z" name="businessKeyEquality" finished-at="2020-08-30T21:03:38Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- businessKeyEquality -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.conversation.Detached@568ff82]" started-at="2020-08-30T21:03:38Z" name="afterMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.conversation.Detached -->
    </test> <!-- Conversations -->
    <test started-at="2020-08-31T01:03:38Z" name="Fetching" finished-at="2020-08-31T01:03:44Z" duration-ms="5937">
      <class name="org.jpwh.test.fetching.LazyInterception">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@6f27a732]" started-at="2020-08-30T21:03:40Z" name="beforeClass" finished-at="2020-08-30T21:03:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@6f27a732]" started-at="2020-08-30T21:03:40Z" name="beforeMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="lazyBasic()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@6f27a732]" started-at="2020-08-30T21:03:40Z" name="lazyBasic" finished-at="2020-08-30T21:03:40Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lazyBasic -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@6f27a732]" started-at="2020-08-30T21:03:40Z" name="afterMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="39" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@6f27a732]" started-at="2020-08-30T21:03:40Z" name="beforeMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="noUserProxy()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@6f27a732]" started-at="2020-08-30T21:03:40Z" name="noUserProxy" finished-at="2020-08-30T21:03:40Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- noUserProxy -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyInterception@6f27a732]" started-at="2020-08-30T21:03:40Z" name="afterMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="38" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.LazyInterception -->
      <class name="org.jpwh.test.fetching.EagerSelect">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@524d6d96]" started-at="2020-08-30T21:03:39Z" name="beforeClass" finished-at="2020-08-30T21:03:39Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@524d6d96]" started-at="2020-08-30T21:03:39Z" name="beforeMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fetchEagerSelect()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@524d6d96]" started-at="2020-08-30T21:03:39Z" name="fetchEagerSelect" finished-at="2020-08-30T21:03:39Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchEagerSelect -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerSelect@524d6d96]" started-at="2020-08-30T21:03:39Z" name="afterMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.EagerSelect -->
      <class name="org.jpwh.test.fetching.CartesianProduct">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@2e1d27ba]" started-at="2020-08-30T21:03:39Z" name="beforeClass" finished-at="2020-08-30T21:03:39Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@2e1d27ba]" started-at="2020-08-30T21:03:39Z" name="beforeMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fetchCollections()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@2e1d27ba]" started-at="2020-08-30T21:03:39Z" name="fetchCollections" finished-at="2020-08-30T21:03:39Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchCollections -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.CartesianProduct@2e1d27ba]" started-at="2020-08-30T21:03:39Z" name="afterMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.CartesianProduct -->
      <class name="org.jpwh.test.fetching.Subselect">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Subselect@76f2bbc1]" started-at="2020-08-30T21:03:39Z" name="beforeMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.Subselect@76f2bbc1]" started-at="2020-08-30T21:03:39Z" name="beforeClass" finished-at="2020-08-30T21:03:39Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="fetchCollectionSubselect()[pri:0, instance:org.jpwh.test.fetching.Subselect@76f2bbc1]" started-at="2020-08-30T21:03:39Z" name="fetchCollectionSubselect" finished-at="2020-08-30T21:03:39Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchCollectionSubselect -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Subselect@76f2bbc1]" started-at="2020-08-30T21:03:39Z" name="afterMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.Subselect -->
      <class name="org.jpwh.test.fetching.NPlusOneSelects">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@68e965f5]" started-at="2020-08-30T21:03:39Z" name="beforeClass" finished-at="2020-08-30T21:03:39Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@68e965f5]" started-at="2020-08-30T21:03:39Z" name="beforeMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fetchBids()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@68e965f5]" started-at="2020-08-30T21:03:39Z" name="fetchBids" finished-at="2020-08-30T21:03:40Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@68e965f5]" started-at="2020-08-30T21:03:40Z" name="afterMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@68e965f5]" started-at="2020-08-30T21:03:40Z" name="beforeMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="183" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fetchUsers()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@68e965f5]" started-at="2020-08-30T21:03:40Z" name="fetchUsers" finished-at="2020-08-30T21:03:40Z" duration-ms="34" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchUsers -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.NPlusOneSelects@68e965f5]" started-at="2020-08-30T21:03:40Z" name="afterMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.NPlusOneSelects -->
      <class name="org.jpwh.test.fetching.ReadOnly">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@8317c52]" started-at="2020-08-30T21:03:41Z" name="beforeClass" finished-at="2020-08-30T21:03:41Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@8317c52]" started-at="2020-08-30T21:03:41Z" name="beforeMethod" finished-at="2020-08-30T21:03:41Z" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="immutableEntity()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@8317c52]" started-at="2020-08-30T21:03:41Z" name="immutableEntity" finished-at="2020-08-30T21:03:41Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- immutableEntity -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@8317c52]" started-at="2020-08-30T21:03:41Z" name="afterMethod" finished-at="2020-08-30T21:03:42Z" duration-ms="530" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@8317c52]" started-at="2020-08-30T21:03:42Z" name="beforeMethod" finished-at="2020-08-30T21:03:42Z" duration-ms="611" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="selectiveReadOnly()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@8317c52]" started-at="2020-08-30T21:03:42Z" name="selectiveReadOnly" finished-at="2020-08-30T21:03:42Z" duration-ms="37" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectiveReadOnly -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.ReadOnly@8317c52]" started-at="2020-08-30T21:03:42Z" name="afterMethod" finished-at="2020-08-30T21:03:43Z" duration-ms="117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.ReadOnly -->
      <class name="org.jpwh.test.fetching.Batch">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.Batch@7e9131d5]" started-at="2020-08-30T21:03:43Z" name="beforeClass" finished-at="2020-08-30T21:03:43Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@7e9131d5]" started-at="2020-08-30T21:03:43Z" name="beforeMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fetchCollectionBatches()[pri:0, instance:org.jpwh.test.fetching.Batch@7e9131d5]" started-at="2020-08-30T21:03:44Z" name="fetchCollectionBatches" finished-at="2020-08-30T21:03:44Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchCollectionBatches -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@7e9131d5]" started-at="2020-08-30T21:03:44Z" name="afterMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@7e9131d5]" started-at="2020-08-30T21:03:44Z" name="beforeMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="221" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fetchProxyBatches()[pri:0, instance:org.jpwh.test.fetching.Batch@7e9131d5]" started-at="2020-08-30T21:03:44Z" name="fetchProxyBatches" finished-at="2020-08-30T21:03:44Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchProxyBatches -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Batch@7e9131d5]" started-at="2020-08-30T21:03:44Z" name="afterMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="58" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.Batch -->
      <class name="org.jpwh.test.fetching.EagerJoin">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@f381794]" started-at="2020-08-30T21:03:39Z" name="beforeMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@f381794]" started-at="2020-08-30T21:03:39Z" name="beforeClass" finished-at="2020-08-30T21:03:39Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="fetchEagerJoin()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@f381794]" started-at="2020-08-30T21:03:39Z" name="fetchEagerJoin" finished-at="2020-08-30T21:03:39Z" duration-ms="30" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchEagerJoin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerJoin@f381794]" started-at="2020-08-30T21:03:39Z" name="afterMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.EagerJoin -->
      <class name="org.jpwh.test.fetching.LazyProxyCollections">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@2525ff7e]" started-at="2020-08-30T21:03:43Z" name="beforeClass" finished-at="2020-08-30T21:03:43Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@2525ff7e]" started-at="2020-08-30T21:03:43Z" name="beforeMethod" finished-at="2020-08-30T21:03:43Z" duration-ms="306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="lazyCollections()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@2525ff7e]" started-at="2020-08-30T21:03:43Z" name="lazyCollections" finished-at="2020-08-30T21:03:43Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lazyCollections -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@2525ff7e]" started-at="2020-08-30T21:03:43Z" name="afterMethod" finished-at="2020-08-30T21:03:43Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@2525ff7e]" started-at="2020-08-30T21:03:43Z" name="beforeMethod" finished-at="2020-08-30T21:03:43Z" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="lazyEntityProxies()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@2525ff7e]" started-at="2020-08-30T21:03:43Z" name="lazyEntityProxies" finished-at="2020-08-30T21:03:43Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lazyEntityProxies -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.LazyProxyCollections@2525ff7e]" started-at="2020-08-30T21:03:43Z" name="afterMethod" finished-at="2020-08-30T21:03:43Z" duration-ms="92" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.LazyProxyCollections -->
      <class name="org.jpwh.test.fetching.EagerQuery">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@2cdd0d4b]" started-at="2020-08-30T21:03:38Z" name="beforeMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@2cdd0d4b]" started-at="2020-08-30T21:03:38Z" name="beforeClass" finished-at="2020-08-30T21:03:38Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="fetchBids()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@2cdd0d4b]" started-at="2020-08-30T21:03:38Z" name="fetchBids" finished-at="2020-08-30T21:03:38Z" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@2cdd0d4b]" started-at="2020-08-30T21:03:38Z" name="afterMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="64" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@2cdd0d4b]" started-at="2020-08-30T21:03:38Z" name="beforeMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="fetchUsers()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@2cdd0d4b]" started-at="2020-08-30T21:03:38Z" name="fetchUsers" finished-at="2020-08-30T21:03:38Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchUsers -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.EagerQuery@2cdd0d4b]" started-at="2020-08-30T21:03:38Z" name="afterMethod" finished-at="2020-08-30T21:03:38Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.EagerQuery -->
      <class name="org.jpwh.test.fetching.FetchLoadGraph">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:40Z" name="beforeMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:40Z" name="beforeClass" finished-at="2020-08-30T21:03:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="loadBidBidderItem()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:40Z" name="loadBidBidderItem" finished-at="2020-08-30T21:03:40Z" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadBidBidderItem -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:40Z" name="afterMethod" finished-at="2020-08-30T21:03:40Z" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:40Z" name="beforeMethod" finished-at="2020-08-30T21:03:41Z" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loadBidBidderItemSellerBids()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="loadBidBidderItemSellerBids" finished-at="2020-08-30T21:03:41Z" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadBidBidderItemSellerBids -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="afterMethod" finished-at="2020-08-30T21:03:41Z" duration-ms="69" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="beforeMethod" finished-at="2020-08-30T21:03:41Z" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loadItem()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="loadItem" finished-at="2020-08-30T21:03:41Z" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadItem -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="afterMethod" finished-at="2020-08-30T21:03:41Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="beforeMethod" finished-at="2020-08-30T21:03:41Z" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loadItemSeller()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="loadItemSeller" finished-at="2020-08-30T21:03:41Z" duration-ms="19" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadItemSeller -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.FetchLoadGraph@61d6015a]" started-at="2020-08-30T21:03:41Z" name="afterMethod" finished-at="2020-08-30T21:03:41Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.FetchLoadGraph -->
      <class name="org.jpwh.test.fetching.Profile">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.fetching.Profile@6c779568]" started-at="2020-08-30T21:03:38Z" name="beforeMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.fetching.Profile@6c779568]" started-at="2020-08-30T21:03:38Z" name="beforeClass" finished-at="2020-08-30T21:03:38Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="fetchWithProfile()[pri:0, instance:org.jpwh.test.fetching.Profile@6c779568]" started-at="2020-08-30T21:03:39Z" name="fetchWithProfile" finished-at="2020-08-30T21:03:39Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fetchWithProfile -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.fetching.Profile@6c779568]" started-at="2020-08-30T21:03:39Z" name="afterMethod" finished-at="2020-08-30T21:03:39Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.fetching.Profile -->
    </test> <!-- Fetching -->
    <test started-at="2020-08-31T01:03:44Z" name="Filtering" finished-at="2020-08-31T01:03:46Z" duration-ms="1712">
      <class name="org.jpwh.test.filtering.Cascade">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:44Z" name="beforeMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="245" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:44Z" name="beforeClass" finished-at="2020-08-30T21:03:44Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="detachMerge()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="detachMerge" finished-at="2020-08-30T21:03:45Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- detachMerge -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="afterMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="61" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="beforeMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="186" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="refresh()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="refresh" finished-at="2020-08-30T21:03:45Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refresh -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="afterMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="64" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="beforeMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="replicate()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="replicate" finished-at="2020-08-30T21:03:45Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- replicate -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Cascade@6d3a388c]" started-at="2020-08-30T21:03:45Z" name="afterMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="51" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.Cascade -->
      <class name="org.jpwh.test.filtering.Callback">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Callback@6a84a97d]" started-at="2020-08-30T21:03:45Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.Callback@6a84a97d]" started-at="2020-08-30T21:03:45Z" name="beforeClass" finished-at="2020-08-30T21:03:45Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="notifyPostPersist()[pri:0, instance:org.jpwh.test.filtering.Callback@6a84a97d]" started-at="2020-08-30T21:03:46Z" name="notifyPostPersist" finished-at="2020-08-30T21:03:46Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- notifyPostPersist -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Callback@6a84a97d]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.Callback -->
      <class name="org.jpwh.test.filtering.DynamicFilter">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@6c130c45]" started-at="2020-08-30T21:03:44Z" name="beforeClass" finished-at="2020-08-30T21:03:44Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@6c130c45]" started-at="2020-08-30T21:03:44Z" name="beforeMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="169" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="filterCollection()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@6c130c45]" started-at="2020-08-30T21:03:44Z" name="filterCollection" finished-at="2020-08-30T21:03:44Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- filterCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@6c130c45]" started-at="2020-08-30T21:03:44Z" name="afterMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="58" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@6c130c45]" started-at="2020-08-30T21:03:44Z" name="beforeMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="filterItems()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@6c130c45]" started-at="2020-08-30T21:03:44Z" name="filterItems" finished-at="2020-08-30T21:03:44Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- filterItems -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.DynamicFilter@6c130c45]" started-at="2020-08-30T21:03:44Z" name="afterMethod" finished-at="2020-08-30T21:03:44Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.DynamicFilter -->
      <class name="org.jpwh.test.filtering.AuditLogging">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@50ad3bc1]" started-at="2020-08-30T21:03:45Z" name="beforeClass" finished-at="2020-08-30T21:03:45Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@50ad3bc1]" started-at="2020-08-30T21:03:45Z" name="beforeMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="writeAuditLog()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@50ad3bc1]" started-at="2020-08-30T21:03:45Z" name="writeAuditLog" finished-at="2020-08-30T21:03:45Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- writeAuditLog -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.AuditLogging@50ad3bc1]" started-at="2020-08-30T21:03:45Z" name="afterMethod" finished-at="2020-08-30T21:03:45Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.filtering.AuditLogging -->
      <class name="org.jpwh.test.filtering.Envers">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.filtering.Envers@223aa2f7]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.filtering.Envers@223aa2f7]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[Unable to build entity manager factory]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: Unable to build entity manager factory
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:66)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:55)
	at org.jpwh.env.JPASetup.<init>(JPASetup.java:62)
	at org.jpwh.env.JPATest.beforeMethod(JPATest.java:54)
	at jdk.internal.reflect.GeneratedMethodAccessor32.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:653)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.boot.MappingException: Unable to perform unmarshalling at line number 0 and column 0. Message: null : origin(envers)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:178)
	at org.hibernate.boot.jaxb.internal.MappingBinder.doBind(MappingBinder.java:57)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.doBind(AbstractBinder.java:102)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.bind(AbstractBinder.java:57)
	at org.hibernate.envers.boot.internal.AdditionalJaxbMappingProducerImpl$1.addDocument(AdditionalJaxbMappingProducerImpl.java:92)
	at org.hibernate.envers.configuration.internal.EntitiesConfigurator.configure(EntitiesConfigurator.java:110)
	at org.hibernate.envers.boot.internal.EnversServiceImpl.doInitialize(EnversServiceImpl.java:152)
	at org.hibernate.envers.boot.internal.EnversServiceImpl.initialize(EnversServiceImpl.java:117)
	at org.hibernate.envers.boot.internal.AdditionalJaxbMappingProducerImpl.produceAdditionalMappings(AdditionalJaxbMappingProducerImpl.java:99)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:288)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:770)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:797)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:58)
	... 37 more
Caused by: javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:278)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:421)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:721)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:662)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:162)
	... 49 more
Caused by: java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
	at javax.xml.bind.ServiceLoaderUtil.nullSafeLoadClass(ServiceLoaderUtil.java:122)
	at javax.xml.bind.ServiceLoaderUtil.safeLoadClass(ServiceLoaderUtil.java:155)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:276)
	... 53 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.filtering.Envers@223aa2f7]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="auditLogging()[pri:0, instance:org.jpwh.test.filtering.Envers@223aa2f7]" started-at="2020-08-30T21:03:46Z" name="auditLogging" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- auditLogging -->
      </class> <!-- org.jpwh.test.filtering.Envers -->
    </test> <!-- Filtering -->
    <test started-at="2020-08-31T01:03:46Z" name="Querying" finished-at="2020-08-31T01:03:46Z" duration-ms="39">
      <class name="org.jpwh.test.querying.criteria.Selection">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@6e0f5f7f]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@6e0f5f7f]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@6e0f5f7f]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Selection@6e0f5f7f]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Selection -->
      <class name="org.jpwh.test.querying.advanced.FilterCollections">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@2c35e847]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@2c35e847]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@2c35e847]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.FilterCollections@2c35e847]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.advanced.FilterCollections -->
      <class name="org.jpwh.test.querying.jpql.Restriction">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" started-at="2020-08-30T21:03:46Z" name="executeQueriesWithFunctions" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Restriction@f0da945]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Restriction -->
      <class name="org.jpwh.test.querying.criteria.Typesafe">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@2ea41516]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@2ea41516]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@2ea41516]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Typesafe@2ea41516]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Typesafe -->
      <class name="org.jpwh.test.querying.advanced.HibernateCriteria">
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@21e360a]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@21e360a]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@21e360a]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@21e360a]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="foo()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@21e360a]" started-at="2020-08-30T21:03:46Z" name="foo" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- foo -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@21e360a]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.HibernateCriteria@21e360a]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.advanced.HibernateCriteria -->
      <class name="org.jpwh.test.querying.criteria.Grouping">
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@5d7148e2]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@5d7148e2]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@5d7148e2]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Grouping@5d7148e2]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Grouping -->
      <class name="org.jpwh.test.querying.jpql.Projection">
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" started-at="2020-08-30T21:03:46Z" name="executeQueriesWithFunctions" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Projection@7c24b813]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Projection -->
      <class name="org.jpwh.test.querying.CreateExecuteQueries">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[Unable to build entity manager factory]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: Unable to build entity manager factory
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:66)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:55)
	at org.jpwh.env.JPASetup.<init>(JPASetup.java:62)
	at org.jpwh.env.JPATest.beforeMethod(JPATest.java:54)
	at jdk.internal.reflect.GeneratedMethodAccessor32.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:653)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.boot.InvalidMappingException: Could not parse mapping document: querying/ExternalizedQueries.hbm.xml (RESOURCE)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:46)
	at org.hibernate.boot.jaxb.internal.UrlXmlSource.doBind(UrlXmlSource.java:36)
	at org.hibernate.boot.spi.XmlMappingBinderAccess.bind(XmlMappingBinderAccess.java:59)
	at org.hibernate.boot.MetadataSources.addResource(MetadataSources.java:274)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.populate(EntityManagerFactoryBuilderImpl.java:668)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.<init>(EntityManagerFactoryBuilderImpl.java:175)
	at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:34)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilder(HibernatePersistenceProvider.java:165)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:114)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:71)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:52)
	... 37 more
Caused by: org.hibernate.boot.MappingException: Unable to perform unmarshalling at line number 0 and column 0. Message: null : origin(querying/ExternalizedQueries.hbm.xml)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:178)
	at org.hibernate.boot.jaxb.internal.MappingBinder.doBind(MappingBinder.java:57)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.doBind(AbstractBinder.java:102)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.bind(AbstractBinder.java:57)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:43)
	... 47 more
Caused by: javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:278)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:421)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:721)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:662)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:162)
	... 51 more
Caused by: java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
	at javax.xml.bind.ServiceLoaderUtil.nullSafeLoadClass(ServiceLoaderUtil.java:122)
	at javax.xml.bind.ServiceLoaderUtil.safeLoadClass(ServiceLoaderUtil.java:155)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:276)
	... 55 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="createHibernateQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="createHibernateQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createHibernateQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="createQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="createQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="createNamedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="createNamedQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createNamedQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="createTypedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="createTypedQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createTypedQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="pagination()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="pagination" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pagination -->
        <test-method signature="parameterBinding()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="parameterBinding" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parameterBinding -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="namedQueries()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="namedQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- namedQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="queryHints()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="queryHints" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryHints -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.CreateExecuteQueries@d5b810e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.CreateExecuteQueries -->
      <class name="org.jpwh.test.querying.advanced.TransformResults">
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@7bd4937b]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@7bd4937b]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@7bd4937b]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.advanced.TransformResults@7bd4937b]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.advanced.TransformResults -->
      <class name="org.jpwh.test.querying.sql.JDBCFallback">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@17497425]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@17497425]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="queryItems()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@17497425]" started-at="2020-08-30T21:03:46Z" name="queryItems" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryItems -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.JDBCFallback@17497425]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.sql.JDBCFallback -->
      <class name="org.jpwh.test.querying.jpql.Joins">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@25fb8912]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@25fb8912]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@25fb8912]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="9" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Joins@25fb8912]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Joins -->
      <class name="org.jpwh.test.querying.jpql.Selection">
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@3a44431a]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@3a44431a]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@3a44431a]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Selection@3a44431a]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
      </class> <!-- org.jpwh.test.querying.jpql.Selection -->
      <class name="org.jpwh.test.querying.criteria.Subselects">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@2805d709]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@2805d709]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@2805d709]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Subselects@2805d709]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
      </class> <!-- org.jpwh.test.querying.criteria.Subselects -->
      <class name="org.jpwh.test.querying.criteria.Restriction">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" started-at="2020-08-30T21:03:46Z" name="executeQueriesWithFunctions" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Restriction@2ed2d9cb]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Restriction -->
      <class name="org.jpwh.test.querying.criteria.Joins">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@3ee37e5a]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@3ee37e5a]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@3ee37e5a]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Joins@3ee37e5a]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
      </class> <!-- org.jpwh.test.querying.criteria.Joins -->
      <class name="org.jpwh.test.querying.sql.HibernateSQLQueries">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" started-at="2020-08-30T21:03:46Z" name="executeRecursiveQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeRecursiveQueries -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.HibernateSQLQueries@1b2abca6]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.sql.HibernateSQLQueries -->
      <class name="org.jpwh.test.querying.jpql.Subselects">
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@194bcebf]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@194bcebf]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@194bcebf]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Subselects@194bcebf]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.jpql.Subselects -->
      <class name="org.jpwh.test.querying.sql.NativeQueries">
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeRecursiveQueries()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" started-at="2020-08-30T21:03:46Z" name="executeRecursiveQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeRecursiveQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.sql.NativeQueries@6392827e]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.jpwh.test.querying.sql.NativeQueries -->
      <class name="org.jpwh.test.querying.jpql.Grouping">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@43dac38f]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@43dac38f]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@43dac38f]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.jpql.Grouping@43dac38f]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
      </class> <!-- org.jpwh.test.querying.jpql.Grouping -->
      <class name="org.jpwh.test.querying.criteria.Projection">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="executeQueries()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" started-at="2020-08-30T21:03:46Z" name="executeQueries" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueries -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="executeQueriesWithFunctions()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" started-at="2020-08-30T21:03:46Z" name="executeQueriesWithFunctions" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeQueriesWithFunctions -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.querying.criteria.Projection@3c7f66c4]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.querying.criteria.Projection -->
    </test> <!-- Querying -->
    <test started-at="2020-08-31T01:03:46Z" name="Custom SQL" finished-at="2020-08-31T01:03:46Z" duration-ms="11">
      <class name="org.jpwh.test.customsql.CustomSQL">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="FAIL">
          <exception class="javax.persistence.PersistenceException">
            <message>
              <![CDATA[Unable to build entity manager factory]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.PersistenceException: Unable to build entity manager factory
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:66)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:55)
	at org.jpwh.env.JPASetup.<init>(JPASetup.java:62)
	at org.jpwh.env.JPATest.beforeMethod(JPATest.java:54)
	at jdk.internal.reflect.GeneratedMethodAccessor32.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:653)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
Caused by: org.hibernate.boot.InvalidMappingException: Could not parse mapping document: customsql/ItemQueries.hbm.xml (RESOURCE)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:46)
	at org.hibernate.boot.jaxb.internal.UrlXmlSource.doBind(UrlXmlSource.java:36)
	at org.hibernate.boot.spi.XmlMappingBinderAccess.bind(XmlMappingBinderAccess.java:59)
	at org.hibernate.boot.MetadataSources.addResource(MetadataSources.java:274)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.populate(EntityManagerFactoryBuilderImpl.java:668)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.<init>(EntityManagerFactoryBuilderImpl.java:175)
	at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:34)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilder(HibernatePersistenceProvider.java:165)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:114)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:71)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:52)
	... 37 more
Caused by: org.hibernate.boot.MappingException: Unable to perform unmarshalling at line number 0 and column 0. Message: null : origin(customsql/ItemQueries.hbm.xml)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:178)
	at org.hibernate.boot.jaxb.internal.MappingBinder.doBind(MappingBinder.java:57)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.doBind(AbstractBinder.java:102)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.bind(AbstractBinder.java:57)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:43)
	... 47 more
Caused by: javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:278)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:421)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:721)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:662)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:162)
	... 51 more
Caused by: java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
	at javax.xml.bind.ServiceLoaderUtil.nullSafeLoadClass(ServiceLoaderUtil.java:122)
	at javax.xml.bind.ServiceLoaderUtil.safeLoadClass(ServiceLoaderUtil.java:155)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:276)
	... 55 more
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.PersistenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="delete()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="delete" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- delete -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="update()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="update" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- update -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="read()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="read" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- read -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="readRestrictedCollection()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="readRestrictedCollection" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- readRestrictedCollection -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.customsql.CustomSQL@21282ed8]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.customsql.CustomSQL -->
    </test> <!-- Custom SQL -->
    <test started-at="2020-08-31T01:03:46Z" name="Serialization" finished-at="2020-08-31T01:03:46Z" duration-ms="0">
    </test> <!-- Serialization -->
    <test started-at="2020-08-31T01:03:46Z" name="Scaling" finished-at="2020-08-31T01:03:56Z" duration-ms="10766">
      <class name="org.jpwh.test.bulkbatch.BulkStatementsSQL">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" started-at="2020-08-30T21:03:49Z" name="beforeMethod" finished-at="2020-08-30T21:03:49Z" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" started-at="2020-08-30T21:03:49Z" name="beforeClass" finished-at="2020-08-30T21:03:49Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" started-at="2020-08-30T21:03:49Z" name="bulkUpdate" finished-at="2020-08-30T21:03:49Z" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdate -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" started-at="2020-08-30T21:03:49Z" name="afterMethod" finished-at="2020-08-30T21:03:49Z" duration-ms="46" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" started-at="2020-08-30T21:03:49Z" name="beforeMethod" finished-at="2020-08-30T21:03:49Z" duration-ms="155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkUpdateHibernate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" started-at="2020-08-30T21:03:49Z" name="bulkUpdateHibernate" finished-at="2020-08-30T21:03:49Z" duration-ms="29" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateHibernate -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsSQL@1e6a3214]" started-at="2020-08-30T21:03:49Z" name="afterMethod" finished-at="2020-08-30T21:03:49Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.bulkbatch.BulkStatementsSQL -->
      <class name="org.jpwh.test.bulkbatch.BatchInsertUpdate">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@55a147cc]" started-at="2020-08-30T21:03:49Z" name="beforeClass" finished-at="2020-08-30T21:03:49Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@55a147cc]" started-at="2020-08-30T21:03:49Z" name="beforeMethod" finished-at="2020-08-30T21:03:49Z" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="batchInsertUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@55a147cc]" started-at="2020-08-30T21:03:49Z" name="batchInsertUpdate" finished-at="2020-08-30T21:03:53Z" duration-ms="3881" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- batchInsertUpdate -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@55a147cc]" started-at="2020-08-30T21:03:53Z" name="afterMethod" finished-at="2020-08-30T21:03:53Z" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@55a147cc]" started-at="2020-08-30T21:03:53Z" name="beforeMethod" finished-at="2020-08-30T21:03:53Z" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="batchInsertUpdateWithStatelessSession()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@55a147cc]" started-at="2020-08-30T21:03:53Z" name="batchInsertUpdateWithStatelessSession" finished-at="2020-08-30T21:03:56Z" duration-ms="3081" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- batchInsertUpdateWithStatelessSession -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BatchInsertUpdate@55a147cc]" started-at="2020-08-30T21:03:56Z" name="afterMethod" finished-at="2020-08-30T21:03:56Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.bulkbatch.BatchInsertUpdate -->
      <class name="org.jpwh.test.bulkbatch.BulkStatementsJPQL">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="beforeClass" finished-at="2020-08-30T21:03:48Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="beforeMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkDelete()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="bulkDelete" finished-at="2020-08-30T21:03:48Z" duration-ms="10" status="PASS">
          <exception class="javax.persistence.EntityNotFoundException">
            <message>
              <![CDATA[No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.EntityNotFoundException: No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1674)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1619)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1234)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1192)
	at org.jpwh.test.bulkbatch.BulkStatementsJPQL.bulkDelete(BulkStatementsJPQL.java:214)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.EntityNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkDelete -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="afterMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="68" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="beforeMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkInsert()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="bulkInsert" finished-at="2020-08-30T21:03:48Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkInsert -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="afterMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="beforeMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="bulkUpdate" finished-at="2020-08-30T21:03:48Z" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdate -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="afterMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="54" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="beforeMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkUpdateInheritance()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="bulkUpdateInheritance" finished-at="2020-08-30T21:03:48Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateInheritance -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="afterMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="67" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:48Z" name="beforeMethod" finished-at="2020-08-30T21:03:49Z" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkUpdateVersioned()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:49Z" name="bulkUpdateVersioned" finished-at="2020-08-30T21:03:49Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateVersioned -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsJPQL@1a942c18]" started-at="2020-08-30T21:03:49Z" name="afterMethod" finished-at="2020-08-30T21:03:49Z" duration-ms="53" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.bulkbatch.BulkStatementsJPQL -->
      <class name="org.jpwh.test.cache.SecondLevel">
        <test-method is-config="true" signature="beforeSuite(java.lang.String, java.lang.String)[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:12Z" name="beforeSuite" finished-at="2020-08-30T21:03:13Z" duration-ms="344" status="PASS">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="beforeClass" finished-at="2020-08-30T21:03:46Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="250" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="cacheBehavior()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="cacheBehavior" finished-at="2020-08-30T21:03:46Z" duration-ms="40" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheBehavior -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="cacheControl()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="cacheControl" finished-at="2020-08-30T21:03:46Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheControl -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="cacheModes()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="cacheModes" finished-at="2020-08-30T21:03:46Z" duration-ms="22" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheModes -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="afterMethod" finished-at="2020-08-30T21:03:46Z" duration-ms="57" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:46Z" name="beforeMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="183" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="cacheNaturalId()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:47Z" name="cacheNaturalId" finished-at="2020-08-30T21:03:47Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheNaturalId -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:47Z" name="afterMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:47Z" name="beforeMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="cacheQueryResults()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:47Z" name="cacheQueryResults" finished-at="2020-08-30T21:03:47Z" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cacheQueryResults -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:47Z" name="afterMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:org.jpwh.test.cache.SecondLevel@20140db9]" started-at="2020-08-30T21:03:56Z" name="afterSuite" finished-at="2020-08-30T21:03:56Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- org.jpwh.test.cache.SecondLevel -->
      <class name="org.jpwh.test.bulkbatch.BulkStatementsCriteria">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="beforeMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="beforeClass" finished-at="2020-08-30T21:03:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="bulkDelete()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="bulkDelete" finished-at="2020-08-30T21:03:47Z" duration-ms="33" status="PASS">
          <exception class="javax.persistence.EntityNotFoundException">
            <message>
              <![CDATA[No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]]]>
            </message>
            <full-stacktrace>
              <![CDATA[javax.persistence.EntityNotFoundException: No row with the given identifier exists: [org.jpwh.model.bulkbatch.CreditCard#302]
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1674)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1619)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1234)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.refresh(AbstractEntityManagerImpl.java:1192)
	at org.jpwh.test.bulkbatch.BulkStatementsCriteria.bulkDelete(BulkStatementsCriteria.java:219)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:122)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:172)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:104)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:70)
]]>
            </full-stacktrace>
          </exception> <!-- javax.persistence.EntityNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkDelete -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="afterMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="62" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="beforeMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkUpdate()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="bulkUpdate" finished-at="2020-08-30T21:03:47Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdate -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="afterMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="beforeMethod" finished-at="2020-08-30T21:03:47Z" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="bulkUpdateVersioned()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:47Z" name="bulkUpdateVersioned" finished-at="2020-08-30T21:03:48Z" duration-ms="19" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkUpdateVersioned -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:org.jpwh.test.bulkbatch.BulkStatementsCriteria@1a6d8329]" started-at="2020-08-30T21:03:48Z" name="afterMethod" finished-at="2020-08-30T21:03:48Z" duration-ms="74" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- org.jpwh.test.bulkbatch.BulkStatementsCriteria -->
    </test> <!-- Scaling -->
  </suite> <!-- AllTests - examples -->
</testng-results>

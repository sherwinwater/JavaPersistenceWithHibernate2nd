<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="liMac.local" failures="1" tests="24" name="Simple Mappings" time="0.213" errors="0" timestamp="31 Aug 2020 01:03:15 GMT">
  <testcase classname="org.jpwh.test.simple.CRUDMetadataHBMXML" name="@BeforeMethod beforeMethod" time="0.0">
    <failure type="javax.persistence.PersistenceException" message="Unable to build entity manager factory">
      <![CDATA[javax.persistence.PersistenceException: Unable to build entity manager factory
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:66)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:55)
	at org.jpwh.env.JPASetup.<init>(JPASetup.java:62)
	at org.jpwh.env.JPATest.beforeMethod(JPATest.java:54)
Caused by: org.hibernate.boot.InvalidMappingException: Could not parse mapping document: simple/Native.hbm.xml (RESOURCE)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:46)
	at org.hibernate.boot.jaxb.internal.UrlXmlSource.doBind(UrlXmlSource.java:36)
	at org.hibernate.boot.spi.XmlMappingBinderAccess.bind(XmlMappingBinderAccess.java:59)
	at org.hibernate.boot.MetadataSources.addResource(MetadataSources.java:274)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.populate(EntityManagerFactoryBuilderImpl.java:668)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.<init>(EntityManagerFactoryBuilderImpl.java:175)
	at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:34)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilder(HibernatePersistenceProvider.java:165)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:114)
	at org.hibernate.jpa.HibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(HibernatePersistenceProvider.java:71)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:52)
	... 38 more
Caused by: org.hibernate.boot.MappingException: Unable to perform unmarshalling at line number 0 and column 0. Message: null : origin(simple/Native.hbm.xml)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:178)
	at org.hibernate.boot.jaxb.internal.MappingBinder.doBind(MappingBinder.java:57)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.doBind(AbstractBinder.java:102)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.bind(AbstractBinder.java:57)
	at org.hibernate.boot.jaxb.internal.InputStreamXmlSource.doBind(InputStreamXmlSource.java:43)
	... 48 more
Caused by: javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:278)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:421)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:721)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:662)
	at org.hibernate.boot.jaxb.internal.AbstractBinder.jaxb(AbstractBinder.java:162)
	... 52 more
Caused by: java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
	at javax.xml.bind.ServiceLoaderUtil.nullSafeLoadClass(ServiceLoaderUtil.java:122)
	at javax.xml.bind.ServiceLoaderUtil.safeLoadClass(ServiceLoaderUtil.java:155)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:276)
	... 56 more
... Removed 35 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataXML" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataXML" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.AccessJPAMetamodel" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="org.jpwh.test.simple.AccessJPAMetamodel" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.AccessJPAMetamodel" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.AccessJPAMetamodel" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.MappingEmbeddables" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="org.jpwh.test.simple.MappingEmbeddables" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.MappingEmbeddables" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.MappingManyToOne" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="org.jpwh.test.simple.MappingManyToOne" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.CRUD" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="org.jpwh.test.simple.CRUD" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataOverrideXML" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataOverrideXML" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataOverrideXML" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataHBMXML" name="storeAndQueryItems" time="0.002">
    <skipped/>
  </testcase> <!-- storeAndQueryItems -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataXML" name="storeAndQueryItems" time="0.001">
    <skipped/>
  </testcase> <!-- storeAndQueryItems -->
  <testcase classname="org.jpwh.test.simple.AccessJPAMetamodel" name="accessDynamicMetamodel" time="0.0">
    <skipped/>
  </testcase> <!-- accessDynamicMetamodel -->
  <testcase classname="org.jpwh.test.simple.AccessJPAMetamodel" name="accessStaticMetamodel" time="0.0">
    <skipped/>
  </testcase> <!-- accessStaticMetamodel -->
  <testcase classname="org.jpwh.test.simple.AccessJPAMetamodel" name="queryStaticMetamodel" time="0.0">
    <skipped/>
  </testcase> <!-- queryStaticMetamodel -->
  <testcase classname="org.jpwh.test.simple.MappingEmbeddables" name="storeAndLoadInvalidUsers" time="0.0">
    <skipped/>
  </testcase> <!-- storeAndLoadInvalidUsers -->
  <testcase classname="org.jpwh.test.simple.MappingEmbeddables" name="storeAndLoadUsers" time="0.0">
    <skipped/>
  </testcase> <!-- storeAndLoadUsers -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="basicUOW" time="0.0">
    <skipped/>
  </testcase> <!-- basicUOW -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="detach" time="0.001">
    <skipped/>
  </testcase> <!-- detach -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="flushModeType" time="0.0">
    <skipped/>
  </testcase> <!-- flushModeType -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="makePersistent" time="0.001">
    <skipped/>
  </testcase> <!-- makePersistent -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="makeTransient" time="0.0">
    <skipped/>
  </testcase> <!-- makeTransient -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="mergeDetached" time="0.0">
    <skipped/>
  </testcase> <!-- mergeDetached -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="refresh" time="0.0">
    <skipped/>
  </testcase> <!-- refresh -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="replicate" time="0.0">
    <skipped/>
  </testcase> <!-- replicate -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="retrievePersistent" time="0.0">
    <skipped/>
  </testcase> <!-- retrievePersistent -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="retrievePersistentReference" time="0.0">
    <skipped/>
  </testcase> <!-- retrievePersistentReference -->
  <testcase classname="org.jpwh.test.simple.SimpleTransitions" name="scopeOfIdentity" time="0.0">
    <skipped/>
  </testcase> <!-- scopeOfIdentity -->
  <testcase classname="org.jpwh.test.simple.MappingManyToOne" name="storeAndLoadBids" time="0.0">
    <skipped/>
  </testcase> <!-- storeAndLoadBids -->
  <testcase classname="org.jpwh.test.simple.CRUD" name="storeAndQueryItems" time="0.0">
    <skipped/>
  </testcase> <!-- storeAndQueryItems -->
  <testcase classname="org.jpwh.test.simple.ModelOperations" name="linkBidAndItem" time="0.001"/>
  <testcase classname="org.jpwh.test.simple.ModelOperations" name="validateItem" time="0.001">
    <failure type="javax.validation.ValidationException" message="Unable to instantiate Configuration.">
      <![CDATA[javax.validation.ValidationException: Unable to instantiate Configuration.
	at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:279)
	at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:110)
	at org.jpwh.test.simple.ModelOperations.validateItem(ModelOperations.java:42)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 1
	at org.hibernate.validator.internal.util.Version.getJavaRelease(Version.java:36)
	at org.hibernate.validator.internal.engine.ConfigurationImpl.<init>(ConfigurationImpl.java:119)
	at org.hibernate.validator.internal.engine.ConfigurationImpl.<init>(ConfigurationImpl.java:95)
	at org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:31)
	at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)
	... 35 more
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- validateItem -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataOverrideXML" name="checkMetadataOverride" time="0.001">
    <skipped/>
  </testcase> <!-- checkMetadataOverride -->
  <testcase classname="org.jpwh.test.simple.CRUDMetadataOverrideXML" name="storeAndQueryItems" time="0.0">
    <skipped/>
  </testcase> <!-- storeAndQueryItems -->
</testsuite> <!-- Simple Mappings -->
